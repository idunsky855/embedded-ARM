
FinalProj-EP3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006274  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006468  08006468  00016468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064e8  080064e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080064e8  080064e8  000164e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064f0  080064f0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064f0  080064f0  000164f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064f4  080064f4  000164f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080064f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  2000000c  08006504  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  08006504  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020056  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bf3  00000000  00000000  000400db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b58  00000000  00000000  00043cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001534  00000000  00000000  00045828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e9b2  00000000  00000000  00046d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ea29  00000000  00000000  0007570e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013275d  00000000  00000000  00094137  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000076c4  00000000  00000000  001c6894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001cdf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	f3af 8000 	nop.w
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	2000000c 	.word	0x2000000c
 8000210:	00000000 	.word	0x00000000
 8000214:	08006450 	.word	0x08006450

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	f3af 8000 	nop.w
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000010 	.word	0x20000010
 8000230:	08006450 	.word	0x08006450

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000244:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000248:	f000 b982 	b.w	8000550 <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000268:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800026a:	460d      	mov	r5, r1
 800026c:	4604      	mov	r4, r0
 800026e:	460f      	mov	r7, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d146      	bne.n	8000302 <__udivmoddi4+0x9e>
 8000274:	428a      	cmp	r2, r1
 8000276:	4694      	mov	ip, r2
 8000278:	d95e      	bls.n	8000338 <__udivmoddi4+0xd4>
 800027a:	fab2 f382 	clz	r3, r2
 800027e:	b143      	cbz	r3, 8000292 <__udivmoddi4+0x2e>
 8000280:	fa02 fc03 	lsl.w	ip, r2, r3
 8000284:	f1c3 0220 	rsb	r2, r3, #32
 8000288:	409f      	lsls	r7, r3
 800028a:	409c      	lsls	r4, r3
 800028c:	fa20 f202 	lsr.w	r2, r0, r2
 8000290:	4317      	orrs	r7, r2
 8000292:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000296:	fa1f f58c 	uxth.w	r5, ip
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	4290      	cmp	r0, r2
 80002ae:	d908      	bls.n	80002c2 <__udivmoddi4+0x5e>
 80002b0:	eb1c 0202 	adds.w	r2, ip, r2
 80002b4:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002b8:	d202      	bcs.n	80002c0 <__udivmoddi4+0x5c>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f200 8134 	bhi.w	8000528 <__udivmoddi4+0x2c4>
 80002c0:	4639      	mov	r1, r7
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d908      	bls.n	80002ec <__udivmoddi4+0x88>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0x86>
 80002e4:	42a5      	cmp	r5, r4
 80002e6:	f200 8119 	bhi.w	800051c <__udivmoddi4+0x2b8>
 80002ea:	4610      	mov	r0, r2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0x9a>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xb4>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80fc 	beq.w	8000504 <__udivmoddi4+0x2a0>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d14c      	bne.n	80003ba <__udivmoddi4+0x156>
 8000320:	42ab      	cmp	r3, r5
 8000322:	f0c0 80f2 	bcc.w	800050a <__udivmoddi4+0x2a6>
 8000326:	4282      	cmp	r2, r0
 8000328:	f240 80ef 	bls.w	800050a <__udivmoddi4+0x2a6>
 800032c:	4608      	mov	r0, r1
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e5      	beq.n	80002fe <__udivmoddi4+0x9a>
 8000332:	e9c6 4700 	strd	r4, r7, [r6]
 8000336:	e7e2      	b.n	80002fe <__udivmoddi4+0x9a>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xd8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f382 	clz	r3, r2
 8000340:	2b00      	cmp	r3, #0
 8000342:	f040 809f 	bne.w	8000484 <__udivmoddi4+0x220>
 8000346:	1a8a      	subs	r2, r1, r2
 8000348:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800034c:	fa1f f78c 	uxth.w	r7, ip
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 f5fe 	udiv	r5, r2, lr
 8000356:	fb0e 2015 	mls	r0, lr, r5, r2
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000360:	fb07 f005 	mul.w	r0, r7, r5
 8000364:	4290      	cmp	r0, r2
 8000366:	d90f      	bls.n	8000388 <__udivmoddi4+0x124>
 8000368:	eb1c 0202 	adds.w	r2, ip, r2
 800036c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000370:	bf2c      	ite	cs
 8000372:	f04f 0901 	movcs.w	r9, #1
 8000376:	f04f 0900 	movcc.w	r9, #0
 800037a:	4290      	cmp	r0, r2
 800037c:	d903      	bls.n	8000386 <__udivmoddi4+0x122>
 800037e:	f1b9 0f00 	cmp.w	r9, #0
 8000382:	f000 80ce 	beq.w	8000522 <__udivmoddi4+0x2be>
 8000386:	4645      	mov	r5, r8
 8000388:	1a12      	subs	r2, r2, r0
 800038a:	b2a4      	uxth	r4, r4
 800038c:	fbb2 f0fe 	udiv	r0, r2, lr
 8000390:	fb0e 2210 	mls	r2, lr, r0, r2
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	42a7      	cmp	r7, r4
 800039e:	d908      	bls.n	80003b2 <__udivmoddi4+0x14e>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a8:	d202      	bcs.n	80003b0 <__udivmoddi4+0x14c>
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	f200 80b3 	bhi.w	8000516 <__udivmoddi4+0x2b2>
 80003b0:	4610      	mov	r0, r2
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b8:	e79c      	b.n	80002f4 <__udivmoddi4+0x90>
 80003ba:	f1c1 0420 	rsb	r4, r1, #32
 80003be:	408b      	lsls	r3, r1
 80003c0:	fa05 fc01 	lsl.w	ip, r5, r1
 80003c4:	fa22 f704 	lsr.w	r7, r2, r4
 80003c8:	40e5      	lsrs	r5, r4
 80003ca:	408a      	lsls	r2, r1
 80003cc:	431f      	orrs	r7, r3
 80003ce:	fa20 f304 	lsr.w	r3, r0, r4
 80003d2:	4088      	lsls	r0, r1
 80003d4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003d8:	ea43 030c 	orr.w	r3, r3, ip
 80003dc:	fa1f fc87 	uxth.w	ip, r7
 80003e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003e4:	fbb5 fef8 	udiv	lr, r5, r8
 80003e8:	fb08 551e 	mls	r5, r8, lr, r5
 80003ec:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 80003f0:	fb0e f90c 	mul.w	r9, lr, ip
 80003f4:	45a9      	cmp	r9, r5
 80003f6:	d90e      	bls.n	8000416 <__udivmoddi4+0x1b2>
 80003f8:	197d      	adds	r5, r7, r5
 80003fa:	f10e 3aff 	add.w	sl, lr, #4294967295	; 0xffffffff
 80003fe:	bf2c      	ite	cs
 8000400:	f04f 0b01 	movcs.w	fp, #1
 8000404:	f04f 0b00 	movcc.w	fp, #0
 8000408:	45a9      	cmp	r9, r5
 800040a:	d903      	bls.n	8000414 <__udivmoddi4+0x1b0>
 800040c:	f1bb 0f00 	cmp.w	fp, #0
 8000410:	f000 808d 	beq.w	800052e <__udivmoddi4+0x2ca>
 8000414:	46d6      	mov	lr, sl
 8000416:	eba5 0509 	sub.w	r5, r5, r9
 800041a:	fa1f f983 	uxth.w	r9, r3
 800041e:	fbb5 f3f8 	udiv	r3, r5, r8
 8000422:	fb08 5513 	mls	r5, r8, r3, r5
 8000426:	fb03 fc0c 	mul.w	ip, r3, ip
 800042a:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800042e:	45ac      	cmp	ip, r5
 8000430:	d906      	bls.n	8000440 <__udivmoddi4+0x1dc>
 8000432:	197d      	adds	r5, r7, r5
 8000434:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000438:	d201      	bcs.n	800043e <__udivmoddi4+0x1da>
 800043a:	45ac      	cmp	ip, r5
 800043c:	d87e      	bhi.n	800053c <__udivmoddi4+0x2d8>
 800043e:	4643      	mov	r3, r8
 8000440:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000444:	eba5 050c 	sub.w	r5, r5, ip
 8000448:	fba3 9802 	umull	r9, r8, r3, r2
 800044c:	4545      	cmp	r5, r8
 800044e:	46ce      	mov	lr, r9
 8000450:	46c4      	mov	ip, r8
 8000452:	d302      	bcc.n	800045a <__udivmoddi4+0x1f6>
 8000454:	d106      	bne.n	8000464 <__udivmoddi4+0x200>
 8000456:	4548      	cmp	r0, r9
 8000458:	d204      	bcs.n	8000464 <__udivmoddi4+0x200>
 800045a:	3b01      	subs	r3, #1
 800045c:	ebb9 0e02 	subs.w	lr, r9, r2
 8000460:	eb68 0c07 	sbc.w	ip, r8, r7
 8000464:	2e00      	cmp	r6, #0
 8000466:	d06f      	beq.n	8000548 <__udivmoddi4+0x2e4>
 8000468:	ebb0 020e 	subs.w	r2, r0, lr
 800046c:	eb65 050c 	sbc.w	r5, r5, ip
 8000470:	40ca      	lsrs	r2, r1
 8000472:	fa05 f404 	lsl.w	r4, r5, r4
 8000476:	40cd      	lsrs	r5, r1
 8000478:	4618      	mov	r0, r3
 800047a:	4314      	orrs	r4, r2
 800047c:	2100      	movs	r1, #0
 800047e:	e9c6 4500 	strd	r4, r5, [r6]
 8000482:	e73c      	b.n	80002fe <__udivmoddi4+0x9a>
 8000484:	fa02 fc03 	lsl.w	ip, r2, r3
 8000488:	f1c3 0220 	rsb	r2, r3, #32
 800048c:	4099      	lsls	r1, r3
 800048e:	409c      	lsls	r4, r3
 8000490:	40d5      	lsrs	r5, r2
 8000492:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000496:	fa20 f202 	lsr.w	r2, r0, r2
 800049a:	fa1f f78c 	uxth.w	r7, ip
 800049e:	fbb5 f0fe 	udiv	r0, r5, lr
 80004a2:	430a      	orrs	r2, r1
 80004a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80004a8:	0c11      	lsrs	r1, r2, #16
 80004aa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ae:	fb00 f507 	mul.w	r5, r0, r7
 80004b2:	428d      	cmp	r5, r1
 80004b4:	d90e      	bls.n	80004d4 <__udivmoddi4+0x270>
 80004b6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004be:	bf2c      	ite	cs
 80004c0:	f04f 0901 	movcs.w	r9, #1
 80004c4:	f04f 0900 	movcc.w	r9, #0
 80004c8:	428d      	cmp	r5, r1
 80004ca:	d902      	bls.n	80004d2 <__udivmoddi4+0x26e>
 80004cc:	f1b9 0f00 	cmp.w	r9, #0
 80004d0:	d031      	beq.n	8000536 <__udivmoddi4+0x2d2>
 80004d2:	4640      	mov	r0, r8
 80004d4:	1b49      	subs	r1, r1, r5
 80004d6:	b292      	uxth	r2, r2
 80004d8:	fbb1 f5fe 	udiv	r5, r1, lr
 80004dc:	fb0e 1115 	mls	r1, lr, r5, r1
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	fb05 f107 	mul.w	r1, r5, r7
 80004e8:	4291      	cmp	r1, r2
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x298>
 80004ec:	eb1c 0202 	adds.w	r2, ip, r2
 80004f0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004f4:	d201      	bcs.n	80004fa <__udivmoddi4+0x296>
 80004f6:	4291      	cmp	r1, r2
 80004f8:	d823      	bhi.n	8000542 <__udivmoddi4+0x2de>
 80004fa:	4645      	mov	r5, r8
 80004fc:	1a52      	subs	r2, r2, r1
 80004fe:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000502:	e726      	b.n	8000352 <__udivmoddi4+0xee>
 8000504:	4631      	mov	r1, r6
 8000506:	4630      	mov	r0, r6
 8000508:	e6f9      	b.n	80002fe <__udivmoddi4+0x9a>
 800050a:	1a84      	subs	r4, r0, r2
 800050c:	eb65 0203 	sbc.w	r2, r5, r3
 8000510:	2001      	movs	r0, #1
 8000512:	4617      	mov	r7, r2
 8000514:	e70b      	b.n	800032e <__udivmoddi4+0xca>
 8000516:	4464      	add	r4, ip
 8000518:	3802      	subs	r0, #2
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14e>
 800051c:	4464      	add	r4, ip
 800051e:	3802      	subs	r0, #2
 8000520:	e6e4      	b.n	80002ec <__udivmoddi4+0x88>
 8000522:	3d02      	subs	r5, #2
 8000524:	4462      	add	r2, ip
 8000526:	e72f      	b.n	8000388 <__udivmoddi4+0x124>
 8000528:	3902      	subs	r1, #2
 800052a:	4462      	add	r2, ip
 800052c:	e6c9      	b.n	80002c2 <__udivmoddi4+0x5e>
 800052e:	f1ae 0e02 	sub.w	lr, lr, #2
 8000532:	443d      	add	r5, r7
 8000534:	e76f      	b.n	8000416 <__udivmoddi4+0x1b2>
 8000536:	3802      	subs	r0, #2
 8000538:	4461      	add	r1, ip
 800053a:	e7cb      	b.n	80004d4 <__udivmoddi4+0x270>
 800053c:	3b02      	subs	r3, #2
 800053e:	443d      	add	r5, r7
 8000540:	e77e      	b.n	8000440 <__udivmoddi4+0x1dc>
 8000542:	3d02      	subs	r5, #2
 8000544:	4462      	add	r2, ip
 8000546:	e7d9      	b.n	80004fc <__udivmoddi4+0x298>
 8000548:	4618      	mov	r0, r3
 800054a:	4631      	mov	r1, r6
 800054c:	e6d7      	b.n	80002fe <__udivmoddi4+0x9a>
 800054e:	bf00      	nop

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800055e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000560:	4907      	ldr	r1, [pc, #28]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	4313      	orrs	r3, r2
 8000566:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b05      	ldr	r3, [pc, #20]	; (8000580 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	4013      	ands	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000

08000584 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000584:	b480      	push	{r7}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800058e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000590:	4907      	ldr	r1, [pc, #28]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4013      	ands	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	bf00      	nop
 80005a6:	3714      	adds	r7, #20
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr
 80005b0:	40021000 	.word	0x40021000

080005b4 <EXTI13_IRQHandler>:
/**
 * @brief  The application entry point.
 * @retval int
 */

void EXTI13_IRQHandler(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI13_IRQn 0 */

	/* USER CODE END EXTI13_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80005b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80005bc:	f002 f9f4 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI13_IRQn 1 */

	funcState++;
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <EXTI13_IRQHandler+0x5c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3301      	adds	r3, #1
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <EXTI13_IRQHandler+0x5c>)
 80005c8:	6013      	str	r3, [r2, #0]
	funcState = funcState % 4;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <EXTI13_IRQHandler+0x5c>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	425a      	negs	r2, r3
 80005d0:	f003 0303 	and.w	r3, r3, #3
 80005d4:	f002 0203 	and.w	r2, r2, #3
 80005d8:	bf58      	it	pl
 80005da:	4253      	negpl	r3, r2
 80005dc:	4a0c      	ldr	r2, [pc, #48]	; (8000610 <EXTI13_IRQHandler+0x5c>)
 80005de:	6013      	str	r3, [r2, #0]
	time = 0;
 80005e0:	4b0c      	ldr	r3, [pc, #48]	; (8000614 <EXTI13_IRQHandler+0x60>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
	count = 0;
 80005e6:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <EXTI13_IRQHandler+0x64>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin( RED_LED, GPIO_PIN_RESET); // red LED
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005f2:	480a      	ldr	r0, [pc, #40]	; (800061c <EXTI13_IRQHandler+0x68>)
 80005f4:	f002 f9a6 	bl	8002944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( BLUE_LED, GPIO_PIN_RESET); // blue LED
 80005f8:	2200      	movs	r2, #0
 80005fa:	2180      	movs	r1, #128	; 0x80
 80005fc:	4808      	ldr	r0, [pc, #32]	; (8000620 <EXTI13_IRQHandler+0x6c>)
 80005fe:	f002 f9a1 	bl	8002944 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin( GREEN_LED, GPIO_PIN_RESET); // green LED
 8000602:	2200      	movs	r2, #0
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	4807      	ldr	r0, [pc, #28]	; (8000624 <EXTI13_IRQHandler+0x70>)
 8000608:	f002 f99c 	bl	8002944 <HAL_GPIO_WritePin>

	/* USER CODE END EXTI13_IRQn 1 */
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000478 	.word	0x20000478
 8000614:	20000474 	.word	0x20000474
 8000618:	2000047c 	.word	0x2000047c
 800061c:	42020000 	.word	0x42020000
 8000620:	42020400 	.word	0x42020400
 8000624:	42020800 	.word	0x42020800

08000628 <main>:

int main(void) {
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	time = 0;
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <main+0x48>)
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
	funcState = 0;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <main+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
	count = 0;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <main+0x50>)
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800063e:	f000 feda 	bl	80013f6 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000642:	f000 f81d 	bl	8000680 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000646:	f000 fa51 	bl	8000aec <MX_GPIO_Init>
	MX_ADC1_Init();
 800064a:	f000 f881 	bl	8000750 <MX_ADC1_Init>
	MX_ICACHE_Init();
 800064e:	f000 f8f5 	bl	800083c <MX_ICACHE_Init>
	MX_LPUART1_UART_Init();
 8000652:	f000 f907 	bl	8000864 <MX_LPUART1_UART_Init>
	MX_RTC_Init();
 8000656:	f000 f953 	bl	8000900 <MX_RTC_Init>
	MX_UCPD1_Init();
 800065a:	f000 f9e9 	bl	8000a30 <MX_UCPD1_Init>
	MX_USB_PCD_Init();
 800065e:	f000 fa1d 	bl	8000a9c <MX_USB_PCD_Init>
	MX_TIM2_Init();
 8000662:	f000 f997 	bl	8000994 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <main+0x54>)
 8000668:	f004 fa12 	bl	8004a90 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800066c:	e7fe      	b.n	800066c <main+0x44>
 800066e:	bf00      	nop
 8000670:	20000474 	.word	0x20000474
 8000674:	20000478 	.word	0x20000478
 8000678:	2000047c 	.word	0x2000047c
 800067c:	2000014c 	.word	0x2000014c

08000680 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b098      	sub	sp, #96	; 0x60
 8000684:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2248      	movs	r2, #72	; 0x48
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f005 feb1 	bl	80063f6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80006a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a6:	f002 fb01 	bl	8002cac <HAL_PWREx_ControlVoltageScaling>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80006b0:	f000 fbde 	bl	8000e70 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80006b4:	f002 fadc 	bl	8002c70 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <SystemClock_Config+0xcc>)
 80006ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006be:	4a23      	ldr	r2, [pc, #140]	; (800074c <SystemClock_Config+0xcc>)
 80006c0:	f023 0318 	bic.w	r3, r3, #24
 80006c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 80006c8:	2336      	movs	r3, #54	; 0x36
 80006ca:	61bb      	str	r3, [r7, #24]
			| RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006cc:	2381      	movs	r3, #129	; 0x81
 80006ce:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006da:	2340      	movs	r3, #64	; 0x40
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006de:	2301      	movs	r3, #1
 80006e0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006e2:	2300      	movs	r3, #0
 80006e4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e6:	2360      	movs	r3, #96	; 0x60
 80006e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006ee:	2301      	movs	r3, #1
 80006f0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLM = 1;
 80006f2:	2301      	movs	r3, #1
 80006f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 36;
 80006f6:	2324      	movs	r3, #36	; 0x24
 80006f8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006fa:	2307      	movs	r3, #7
 80006fc:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000706:	f107 0318 	add.w	r3, r7, #24
 800070a:	4618      	mov	r0, r3
 800070c:	f002 fb5e 	bl	8002dcc <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x9a>
		Error_Handler();
 8000716:	f000 fbab 	bl	8000e70 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2303      	movs	r3, #3
 8000720:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	2103      	movs	r1, #3
 8000732:	4618      	mov	r0, r3
 8000734:	f003 f820 	bl	8003778 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xc2>
		Error_Handler();
 800073e:	f000 fb97 	bl	8000e70 <Error_Handler>
	}
}
 8000742:	bf00      	nop
 8000744:	3760      	adds	r7, #96	; 0x60
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000

08000750 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
 8000770:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000772:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <MX_ADC1_Init+0xe0>)
 8000774:	4a2f      	ldr	r2, [pc, #188]	; (8000834 <MX_ADC1_Init+0xe4>)
 8000776:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000778:	4b2d      	ldr	r3, [pc, #180]	; (8000830 <MX_ADC1_Init+0xe0>)
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800077e:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_ADC1_Init+0xe0>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000784:	4b2a      	ldr	r3, [pc, #168]	; (8000830 <MX_ADC1_Init+0xe0>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800078a:	4b29      	ldr	r3, [pc, #164]	; (8000830 <MX_ADC1_Init+0xe0>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <MX_ADC1_Init+0xe0>)
 8000792:	2204      	movs	r2, #4
 8000794:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000796:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_ADC1_Init+0xe0>)
 8000798:	2200      	movs	r2, #0
 800079a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800079c:	4b24      	ldr	r3, [pc, #144]	; (8000830 <MX_ADC1_Init+0xe0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80007a2:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_ADC1_Init+0xe0>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007a8:	4b21      	ldr	r3, [pc, #132]	; (8000830 <MX_ADC1_Init+0xe0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <MX_ADC1_Init+0xe0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MX_ADC1_Init+0xe0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_ADC1_Init+0xe0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_ADC1_Init+0xe0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80007ca:	4b19      	ldr	r3, [pc, #100]	; (8000830 <MX_ADC1_Init+0xe0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80007d2:	4817      	ldr	r0, [pc, #92]	; (8000830 <MX_ADC1_Init+0xe0>)
 80007d4:	f001 f826 	bl	8001824 <HAL_ADC_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC1_Init+0x92>
		Error_Handler();
 80007de:	f000 fb47 	bl	8000e70 <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	4810      	ldr	r0, [pc, #64]	; (8000830 <MX_ADC1_Init+0xe0>)
 80007ee:	f001 fd75 	bl	80022dc <HAL_ADCEx_MultiModeConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC1_Init+0xac>
		Error_Handler();
 80007f8:	f000 fb3a 	bl	8000e70 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_ADC1_Init+0xe8>)
 80007fe:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000800:	2306      	movs	r3, #6
 8000802:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000808:	237f      	movs	r3, #127	; 0x7f
 800080a:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800080c:	2304      	movs	r3, #4
 800080e:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_ADC1_Init+0xe0>)
 800081a:	f001 f94f 	bl	8001abc <HAL_ADC_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC1_Init+0xd8>
		Error_Handler();
 8000824:	f000 fb24 	bl	8000e70 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000028 	.word	0x20000028
 8000834:	42028000 	.word	0x42028000
 8000838:	0c900008 	.word	0x0c900008

0800083c <MX_ICACHE_Init>:
/**
 * @brief ICACHE Initialization Function
 * @param None
 * @retval None
 */
static void MX_ICACHE_Init(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0

	/* USER CODE END ICACHE_Init 1 */

	/** Enable instruction cache in 1-way (direct mapped cache)
	 */
	if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK) {
 8000840:	2000      	movs	r0, #0
 8000842:	f002 f8ed 	bl	8002a20 <HAL_ICACHE_ConfigAssociativityMode>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ICACHE_Init+0x14>
		Error_Handler();
 800084c:	f000 fb10 	bl	8000e70 <Error_Handler>
	}
	if (HAL_ICACHE_Enable() != HAL_OK) {
 8000850:	f002 f906 	bl	8002a60 <HAL_ICACHE_Enable>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ICACHE_Init+0x22>
		Error_Handler();
 800085a:	f000 fb09 	bl	8000e70 <Error_Handler>
	}
	/* USER CODE BEGIN ICACHE_Init 2 */

	/* USER CODE END ICACHE_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <MX_LPUART1_UART_Init>:
/**
 * @brief LPUART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPUART1_UART_Init(void) {
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	/* USER CODE END LPUART1_Init 0 */

	/* USER CODE BEGIN LPUART1_Init 1 */

	/* USER CODE END LPUART1_Init 1 */
	hlpuart1.Instance = LPUART1;
 8000868:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <MX_LPUART1_UART_Init+0x90>)
 800086a:	4a23      	ldr	r2, [pc, #140]	; (80008f8 <MX_LPUART1_UART_Init+0x94>)
 800086c:	601a      	str	r2, [r3, #0]
	hlpuart1.Init.BaudRate = 209700;
 800086e:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <MX_LPUART1_UART_Init+0x90>)
 8000870:	4a22      	ldr	r2, [pc, #136]	; (80008fc <MX_LPUART1_UART_Init+0x98>)
 8000872:	605a      	str	r2, [r3, #4]
	hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_LPUART1_UART_Init+0x90>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
	hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800087a:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <MX_LPUART1_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	60da      	str	r2, [r3, #12]
	hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000880:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_LPUART1_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
	hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000886:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <MX_LPUART1_UART_Init+0x90>)
 8000888:	220c      	movs	r2, #12
 800088a:	615a      	str	r2, [r3, #20]
	hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_LPUART1_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	619a      	str	r2, [r3, #24]
	hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <MX_LPUART1_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
	hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <MX_LPUART1_UART_Init+0x90>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
	hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_LPUART1_UART_Init+0x90>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	629a      	str	r2, [r3, #40]	; 0x28
	hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_LPUART1_UART_Init+0x90>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	665a      	str	r2, [r3, #100]	; 0x64
	if (HAL_UART_Init(&hlpuart1) != HAL_OK) {
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <MX_LPUART1_UART_Init+0x90>)
 80008ac:	f004 fd40 	bl	8005330 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_LPUART1_UART_Init+0x56>
		Error_Handler();
 80008b6:	f000 fadb 	bl	8000e70 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8)
 80008ba:	2100      	movs	r1, #0
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <MX_LPUART1_UART_Init+0x90>)
 80008be:	f005 fadf 	bl	8005e80 <HAL_UARTEx_SetTxFifoThreshold>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_LPUART1_UART_Init+0x68>
			!= HAL_OK) {
		Error_Handler();
 80008c8:	f000 fad2 	bl	8000e70 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8)
 80008cc:	2100      	movs	r1, #0
 80008ce:	4809      	ldr	r0, [pc, #36]	; (80008f4 <MX_LPUART1_UART_Init+0x90>)
 80008d0:	f005 fb14 	bl	8005efc <HAL_UARTEx_SetRxFifoThreshold>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_LPUART1_UART_Init+0x7a>
			!= HAL_OK) {
		Error_Handler();
 80008da:	f000 fac9 	bl	8000e70 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK) {
 80008de:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_LPUART1_UART_Init+0x90>)
 80008e0:	f005 fa95 	bl	8005e0e <HAL_UARTEx_DisableFifoMode>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_LPUART1_UART_Init+0x8a>
		Error_Handler();
 80008ea:	f000 fac1 	bl	8000e70 <Error_Handler>
	}
	/* USER CODE BEGIN LPUART1_Init 2 */

	/* USER CODE END LPUART1_Init 2 */

}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000090 	.word	0x20000090
 80008f8:	40008000 	.word	0x40008000
 80008fc:	00033324 	.word	0x00033324

08000900 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_PrivilegeStateTypeDef privilegeState = { 0 };
 8000906:	463b      	mov	r3, r7
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
 8000914:	615a      	str	r2, [r3, #20]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <MX_RTC_Init+0x8c>)
 8000918:	4a1d      	ldr	r2, [pc, #116]	; (8000990 <MX_RTC_Init+0x90>)
 800091a:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800091c:	4b1b      	ldr	r3, [pc, #108]	; (800098c <MX_RTC_Init+0x8c>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <MX_RTC_Init+0x8c>)
 8000924:	227f      	movs	r2, #127	; 0x7f
 8000926:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000928:	4b18      	ldr	r3, [pc, #96]	; (800098c <MX_RTC_Init+0x8c>)
 800092a:	22ff      	movs	r2, #255	; 0xff
 800092c:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <MX_RTC_Init+0x8c>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000934:	4b15      	ldr	r3, [pc, #84]	; (800098c <MX_RTC_Init+0x8c>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <MX_RTC_Init+0x8c>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <MX_RTC_Init+0x8c>)
 8000942:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000946:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000948:	4b10      	ldr	r3, [pc, #64]	; (800098c <MX_RTC_Init+0x8c>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800094e:	480f      	ldr	r0, [pc, #60]	; (800098c <MX_RTC_Init+0x8c>)
 8000950:	f003 ff0c 	bl	800476c <HAL_RTC_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_RTC_Init+0x5e>
		Error_Handler();
 800095a:	f000 fa89 	bl	8000e70 <Error_Handler>
	}
	privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800095e:	2300      	movs	r3, #0
 8000960:	603b      	str	r3, [r7, #0]
	privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
	privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
	privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
	if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK) {
 800096e:	463b      	mov	r3, r7
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <MX_RTC_Init+0x8c>)
 8000974:	f004 f808 	bl	8004988 <HAL_RTCEx_PrivilegeModeSet>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_RTC_Init+0x82>
		Error_Handler();
 800097e:	f000 fa77 	bl	8000e70 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	3718      	adds	r7, #24
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000124 	.word	0x20000124
 8000990:	40002800 	.word	0x40002800

08000994 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b088      	sub	sp, #32
 8000998:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800099a:	f107 0310 	add.w	r3, r7, #16
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <MX_TIM2_Init+0x98>)
 80009b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 7200 - 1;
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_TIM2_Init+0x98>)
 80009bc:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80009c0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	; (8000a2c <MX_TIM2_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 2000;
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_TIM2_Init+0x98>)
 80009ca:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80009ce:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_TIM2_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_TIM2_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80009dc:	4813      	ldr	r0, [pc, #76]	; (8000a2c <MX_TIM2_Init+0x98>)
 80009de:	f003 ffff 	bl	80049e0 <HAL_TIM_Base_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM2_Init+0x58>
		Error_Handler();
 80009e8:	f000 fa42 	bl	8000e70 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80009f2:	f107 0310 	add.w	r3, r7, #16
 80009f6:	4619      	mov	r1, r3
 80009f8:	480c      	ldr	r0, [pc, #48]	; (8000a2c <MX_TIM2_Init+0x98>)
 80009fa:	f004 f9c0 	bl	8004d7e <HAL_TIM_ConfigClockSource>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM2_Init+0x74>
		Error_Handler();
 8000a04:	f000 fa34 	bl	8000e70 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000a10:	1d3b      	adds	r3, r7, #4
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_TIM2_Init+0x98>)
 8000a16:	f004 fbe5 	bl	80051e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM2_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000a20:	f000 fa26 	bl	8000e70 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3720      	adds	r7, #32
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000014c 	.word	0x2000014c

08000a30 <MX_UCPD1_Init>:
/**
 * @brief UCPD1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UCPD1_Init(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b086      	sub	sp, #24
 8000a34:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN UCPD1_Init 0 */

	/* USER CODE END UCPD1_Init 0 */

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a36:	463b      	mov	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000a46:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000a4a:	f7ff fd9b 	bl	8000584 <LL_APB1_GRP2_EnableClock>

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000a4e:	2002      	movs	r0, #2
 8000a50:	f7ff fd80 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a54:	2001      	movs	r0, #1
 8000a56:	f7ff fd7d 	bl	8000554 <LL_AHB2_GRP1_EnableClock>
	/**UCPD1 GPIO Configuration
	 PB15   ------> UCPD1_CC2
	 PA15 (JTDI)   ------> UCPD1_CC1
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a5e:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a60:	2303      	movs	r3, #3
 8000a62:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a64:	2300      	movs	r3, #0
 8000a66:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	463b      	mov	r3, r7
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <MX_UCPD1_Init+0x64>)
 8000a6e:	f005 fc1c 	bl	80062aa <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a76:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	613b      	str	r3, [r7, #16]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	4804      	ldr	r0, [pc, #16]	; (8000a98 <MX_UCPD1_Init+0x68>)
 8000a86:	f005 fc10 	bl	80062aa <LL_GPIO_Init>
	/* USER CODE END UCPD1_Init 1 */
	/* USER CODE BEGIN UCPD1_Init 2 */

	/* USER CODE END UCPD1_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	42020400 	.word	0x42020400
 8000a98:	42020000 	.word	0x42020000

08000a9c <MX_USB_PCD_Init>:
/**
 * @brief USB Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_PCD_Init(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	/* USER CODE END USB_Init 0 */

	/* USER CODE BEGIN USB_Init 1 */

	/* USER CODE END USB_Init 1 */
	hpcd_USB_FS.Instance = USB;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000aa2:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <MX_USB_PCD_Init+0x4c>)
 8000aa4:	601a      	str	r2, [r3, #0]
	hpcd_USB_FS.Init.dev_endpoints = 8;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000aa8:	2208      	movs	r2, #8
 8000aaa:	711a      	strb	r2, [r3, #4]
	hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000aae:	2202      	movs	r2, #2
 8000ab0:	715a      	strb	r2, [r3, #5]
	hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000ab4:	2202      	movs	r2, #2
 8000ab6:	71da      	strb	r2, [r3, #7]
	hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	721a      	strb	r2, [r3, #8]
	hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	725a      	strb	r2, [r3, #9]
	hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000ac4:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	729a      	strb	r2, [r3, #10]
	hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	72da      	strb	r2, [r3, #11]
	if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK) {
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_USB_PCD_Init+0x48>)
 8000ad2:	f001 ffd5 	bl	8002a80 <HAL_PCD_Init>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_USB_PCD_Init+0x44>
		Error_Handler();
 8000adc:	f000 f9c8 	bl	8000e70 <Error_Handler>
	}
	/* USER CODE BEGIN USB_Init 2 */

	/* USER CODE END USB_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	20000198 	.word	0x20000198
 8000ae8:	4000d400 	.word	0x4000d400

08000aec <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b02:	4b50      	ldr	r3, [pc, #320]	; (8000c44 <MX_GPIO_Init+0x158>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a4f      	ldr	r2, [pc, #316]	; (8000c44 <MX_GPIO_Init+0x158>)
 8000b08:	f043 0304 	orr.w	r3, r3, #4
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b4d      	ldr	r3, [pc, #308]	; (8000c44 <MX_GPIO_Init+0x158>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0304 	and.w	r3, r3, #4
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1a:	4b4a      	ldr	r3, [pc, #296]	; (8000c44 <MX_GPIO_Init+0x158>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a49      	ldr	r2, [pc, #292]	; (8000c44 <MX_GPIO_Init+0x158>)
 8000b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b47      	ldr	r3, [pc, #284]	; (8000c44 <MX_GPIO_Init+0x158>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	4b44      	ldr	r3, [pc, #272]	; (8000c44 <MX_GPIO_Init+0x158>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a43      	ldr	r2, [pc, #268]	; (8000c44 <MX_GPIO_Init+0x158>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b41      	ldr	r3, [pc, #260]	; (8000c44 <MX_GPIO_Init+0x158>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000b4a:	4b3e      	ldr	r3, [pc, #248]	; (8000c44 <MX_GPIO_Init+0x158>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a3d      	ldr	r2, [pc, #244]	; (8000c44 <MX_GPIO_Init+0x158>)
 8000b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b3b      	ldr	r3, [pc, #236]	; (8000c44 <MX_GPIO_Init+0x158>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]
	HAL_PWREx_EnableVddIO2();
 8000b62:	f002 f8ff 	bl	8002d64 <HAL_PWREx_EnableVddIO2>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b37      	ldr	r3, [pc, #220]	; (8000c44 <MX_GPIO_Init+0x158>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a36      	ldr	r2, [pc, #216]	; (8000c44 <MX_GPIO_Init+0x158>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b34      	ldr	r3, [pc, #208]	; (8000c44 <MX_GPIO_Init+0x158>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	4831      	ldr	r0, [pc, #196]	; (8000c48 <MX_GPIO_Init+0x15c>)
 8000b84:	f001 fede 	bl	8002944 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b8e:	482f      	ldr	r0, [pc, #188]	; (8000c4c <MX_GPIO_Init+0x160>)
 8000b90:	f001 fed8 	bl	8002944 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, UCPD_DBN_Pin | LED_BLUE_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	21a0      	movs	r1, #160	; 0xa0
 8000b98:	482d      	ldr	r0, [pc, #180]	; (8000c50 <MX_GPIO_Init+0x164>)
 8000b9a:	f001 fed3 	bl	8002944 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ba2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ba4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ba8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4824      	ldr	r0, [pc, #144]	; (8000c48 <MX_GPIO_Init+0x15c>)
 8000bb6:	f001 fd45 	bl	8002644 <HAL_GPIO_Init>

	/*Configure GPIO pin : UCPD_FLT_Pin */
	GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 8000bba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bbe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bc0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bc4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8000bca:	f107 0314 	add.w	r3, r7, #20
 8000bce:	4619      	mov	r1, r3
 8000bd0:	481f      	ldr	r0, [pc, #124]	; (8000c50 <MX_GPIO_Init+0x164>)
 8000bd2:	f001 fd37 	bl	8002644 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_GREEN_Pin */
	GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000bd6:	2380      	movs	r3, #128	; 0x80
 8000bd8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4816      	ldr	r0, [pc, #88]	; (8000c48 <MX_GPIO_Init+0x15c>)
 8000bee:	f001 fd29 	bl	8002644 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_RED_Pin */
	GPIO_InitStruct.Pin = LED_RED_Pin;
 8000bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4810      	ldr	r0, [pc, #64]	; (8000c4c <MX_GPIO_Init+0x160>)
 8000c0c:	f001 fd1a 	bl	8002644 <HAL_GPIO_Init>

	/*Configure GPIO pins : UCPD_DBN_Pin LED_BLUE_Pin */
	GPIO_InitStruct.Pin = UCPD_DBN_Pin | LED_BLUE_Pin;
 8000c10:	23a0      	movs	r3, #160	; 0xa0
 8000c12:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	4619      	mov	r1, r3
 8000c26:	480a      	ldr	r0, [pc, #40]	; (8000c50 <MX_GPIO_Init+0x164>)
 8000c28:	f001 fd0c 	bl	8002644 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	2018      	movs	r0, #24
 8000c32:	f001 fcd2 	bl	80025da <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000c36:	2018      	movs	r0, #24
 8000c38:	f001 fce9 	bl	800260e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3c:	bf00      	nop
 8000c3e:	3728      	adds	r7, #40	; 0x28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	40021000 	.word	0x40021000
 8000c48:	42020800 	.word	0x42020800
 8000c4c:	42020000 	.word	0x42020000
 8000c50:	42020400 	.word	0x42020400

08000c54 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b086      	sub	sp, #24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
	if (funcState == 0) {
 8000c5c:	4b7e      	ldr	r3, [pc, #504]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d143      	bne.n	8000cec <HAL_TIM_PeriodElapsedCallback+0x98>
		time++;
 8000c64:	4b7d      	ldr	r3, [pc, #500]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	4a7c      	ldr	r2, [pc, #496]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000c6c:	6013      	str	r3, [r2, #0]
		if (time == 1) {
 8000c6e:	4b7b      	ldr	r3, [pc, #492]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d105      	bne.n	8000c82 <HAL_TIM_PeriodElapsedCallback+0x2e>
			//red Light
			HAL_GPIO_TogglePin(RED_LED);  // red LED
 8000c76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c7a:	4879      	ldr	r0, [pc, #484]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000c7c:	f001 fe7a 	bl	8002974 <HAL_GPIO_TogglePin>
		}


	}

}
 8000c80:	e0e5      	b.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
		} else if (time == 5) {
 8000c82:	4b76      	ldr	r3, [pc, #472]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	2b05      	cmp	r3, #5
 8000c88:	d104      	bne.n	8000c94 <HAL_TIM_PeriodElapsedCallback+0x40>
			HAL_GPIO_TogglePin(BLUE_LED); // blue LED
 8000c8a:	2180      	movs	r1, #128	; 0x80
 8000c8c:	4875      	ldr	r0, [pc, #468]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000c8e:	f001 fe71 	bl	8002974 <HAL_GPIO_TogglePin>
}
 8000c92:	e0dc      	b.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
		} else if (time == 10) {
 8000c94:	4b71      	ldr	r3, [pc, #452]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b0a      	cmp	r3, #10
 8000c9a:	d10d      	bne.n	8000cb8 <HAL_TIM_PeriodElapsedCallback+0x64>
			HAL_GPIO_TogglePin(RED_LED); // red LED
 8000c9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca0:	486f      	ldr	r0, [pc, #444]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000ca2:	f001 fe67 	bl	8002974 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(BLUE_LED); // blue LED
 8000ca6:	2180      	movs	r1, #128	; 0x80
 8000ca8:	486e      	ldr	r0, [pc, #440]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000caa:	f001 fe63 	bl	8002974 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_LED); // green LED
 8000cae:	2180      	movs	r1, #128	; 0x80
 8000cb0:	486d      	ldr	r0, [pc, #436]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000cb2:	f001 fe5f 	bl	8002974 <HAL_GPIO_TogglePin>
}
 8000cb6:	e0ca      	b.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
		} else if (time == 15) {
 8000cb8:	4b68      	ldr	r3, [pc, #416]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b0f      	cmp	r3, #15
 8000cbe:	d108      	bne.n	8000cd2 <HAL_TIM_PeriodElapsedCallback+0x7e>
			HAL_GPIO_TogglePin(BLUE_LED); // blue LED
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	4868      	ldr	r0, [pc, #416]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000cc4:	f001 fe56 	bl	8002974 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_LED); // green LED
 8000cc8:	2180      	movs	r1, #128	; 0x80
 8000cca:	4867      	ldr	r0, [pc, #412]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000ccc:	f001 fe52 	bl	8002974 <HAL_GPIO_TogglePin>
}
 8000cd0:	e0bd      	b.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
		} else if (time == 20) {
 8000cd2:	4b62      	ldr	r3, [pc, #392]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b14      	cmp	r3, #20
 8000cd8:	f040 80b9 	bne.w	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
			HAL_GPIO_TogglePin(BLUE_LED); // blue LED
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	4861      	ldr	r0, [pc, #388]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000ce0:	f001 fe48 	bl	8002974 <HAL_GPIO_TogglePin>
			time = 0; // cycle through
 8000ce4:	4b5d      	ldr	r3, [pc, #372]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
}
 8000cea:	e0b0      	b.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
	} else if (funcState == 1) {
 8000cec:	4b5a      	ldr	r3, [pc, #360]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d136      	bne.n	8000d62 <HAL_TIM_PeriodElapsedCallback+0x10e>
		time++;
 8000cf4:	4b59      	ldr	r3, [pc, #356]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	4a58      	ldr	r2, [pc, #352]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000cfc:	6013      	str	r3, [r2, #0]
		if (time == 5) {
 8000cfe:	4b57      	ldr	r3, [pc, #348]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b05      	cmp	r3, #5
 8000d04:	d105      	bne.n	8000d12 <HAL_TIM_PeriodElapsedCallback+0xbe>
			HAL_GPIO_TogglePin(RED_LED); // red LED
 8000d06:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d0a:	4855      	ldr	r0, [pc, #340]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000d0c:	f001 fe32 	bl	8002974 <HAL_GPIO_TogglePin>
}
 8000d10:	e09d      	b.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
		} else if (time == 10) {
 8000d12:	4b52      	ldr	r3, [pc, #328]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	2b0a      	cmp	r3, #10
 8000d18:	d104      	bne.n	8000d24 <HAL_TIM_PeriodElapsedCallback+0xd0>
			HAL_GPIO_TogglePin(BLUE_LED); // blue LED
 8000d1a:	2180      	movs	r1, #128	; 0x80
 8000d1c:	4851      	ldr	r0, [pc, #324]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000d1e:	f001 fe29 	bl	8002974 <HAL_GPIO_TogglePin>
}
 8000d22:	e094      	b.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
		} else if (time == 15) {
 8000d24:	4b4d      	ldr	r3, [pc, #308]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d104      	bne.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0xe2>
			HAL_GPIO_TogglePin(GREEN_LED); // green LED
 8000d2c:	2180      	movs	r1, #128	; 0x80
 8000d2e:	484e      	ldr	r0, [pc, #312]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000d30:	f001 fe20 	bl	8002974 <HAL_GPIO_TogglePin>
}
 8000d34:	e08b      	b.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
		} else if (time == 20) {
 8000d36:	4b49      	ldr	r3, [pc, #292]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b14      	cmp	r3, #20
 8000d3c:	f040 8087 	bne.w	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
			HAL_GPIO_TogglePin(RED_LED); // red LED
 8000d40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d44:	4846      	ldr	r0, [pc, #280]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000d46:	f001 fe15 	bl	8002974 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(BLUE_LED); // blue LED
 8000d4a:	2180      	movs	r1, #128	; 0x80
 8000d4c:	4845      	ldr	r0, [pc, #276]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000d4e:	f001 fe11 	bl	8002974 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_LED); // green LED
 8000d52:	2180      	movs	r1, #128	; 0x80
 8000d54:	4844      	ldr	r0, [pc, #272]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000d56:	f001 fe0d 	bl	8002974 <HAL_GPIO_TogglePin>
			time = 0;
 8000d5a:	4b40      	ldr	r3, [pc, #256]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
}
 8000d60:	e075      	b.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
	} else if (funcState == 2) {
 8000d62:	4b3d      	ldr	r3, [pc, #244]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x204>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d149      	bne.n	8000dfe <HAL_TIM_PeriodElapsedCallback+0x1aa>
		red = ((count) & 0x4) >> 2;
 8000d6a:	4b40      	ldr	r3, [pc, #256]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	109b      	asrs	r3, r3, #2
 8000d70:	f003 0301 	and.w	r3, r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
		blue = ((count) & 0x2) >> 1;
 8000d76:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	105b      	asrs	r3, r3, #1
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	613b      	str	r3, [r7, #16]
		green = ((count) & 0x1);
 8000d82:	4b3a      	ldr	r3, [pc, #232]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60fb      	str	r3, [r7, #12]
		if (red) {
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d006      	beq.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x14c>
			HAL_GPIO_WritePin(RED_LED, GPIO_PIN_SET);
 8000d92:	2201      	movs	r2, #1
 8000d94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d98:	4831      	ldr	r0, [pc, #196]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000d9a:	f001 fdd3 	bl	8002944 <HAL_GPIO_WritePin>
 8000d9e:	e005      	b.n	8000dac <HAL_TIM_PeriodElapsedCallback+0x158>
			HAL_GPIO_WritePin(RED_LED, GPIO_PIN_RESET);
 8000da0:	2200      	movs	r2, #0
 8000da2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000da6:	482e      	ldr	r0, [pc, #184]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000da8:	f001 fdcc 	bl	8002944 <HAL_GPIO_WritePin>
		if (blue) {
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d005      	beq.n	8000dbe <HAL_TIM_PeriodElapsedCallback+0x16a>
			HAL_GPIO_WritePin(BLUE_LED, GPIO_PIN_SET);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2180      	movs	r1, #128	; 0x80
 8000db6:	482b      	ldr	r0, [pc, #172]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000db8:	f001 fdc4 	bl	8002944 <HAL_GPIO_WritePin>
 8000dbc:	e004      	b.n	8000dc8 <HAL_TIM_PeriodElapsedCallback+0x174>
			HAL_GPIO_WritePin(BLUE_LED, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	4828      	ldr	r0, [pc, #160]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8000dc4:	f001 fdbe 	bl	8002944 <HAL_GPIO_WritePin>
		if (green) {
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d005      	beq.n	8000dda <HAL_TIM_PeriodElapsedCallback+0x186>
			HAL_GPIO_WritePin(GREEN_LED, GPIO_PIN_SET);
 8000dce:	2201      	movs	r2, #1
 8000dd0:	2180      	movs	r1, #128	; 0x80
 8000dd2:	4825      	ldr	r0, [pc, #148]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000dd4:	f001 fdb6 	bl	8002944 <HAL_GPIO_WritePin>
 8000dd8:	e004      	b.n	8000de4 <HAL_TIM_PeriodElapsedCallback+0x190>
			HAL_GPIO_WritePin(GREEN_LED, GPIO_PIN_RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2180      	movs	r1, #128	; 0x80
 8000dde:	4822      	ldr	r0, [pc, #136]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000de0:	f001 fdb0 	bl	8002944 <HAL_GPIO_WritePin>
		count++;
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	4a20      	ldr	r2, [pc, #128]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000dec:	6013      	str	r3, [r2, #0]
		if(count == 8) count = 0;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b08      	cmp	r3, #8
 8000df4:	d12b      	bne.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
}
 8000dfc:	e027      	b.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
		time++;
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e06:	6013      	str	r3, [r2, #0]
		if (time == 1) {
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d105      	bne.n	8000e1c <HAL_TIM_PeriodElapsedCallback+0x1c8>
			HAL_GPIO_TogglePin(RED_LED);  // red LED
 8000e10:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e14:	4812      	ldr	r0, [pc, #72]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e16:	f001 fdad 	bl	8002974 <HAL_GPIO_TogglePin>
}
 8000e1a:	e018      	b.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
		} else if (time == 10) {
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2b0a      	cmp	r3, #10
 8000e22:	d109      	bne.n	8000e38 <HAL_TIM_PeriodElapsedCallback+0x1e4>
			HAL_GPIO_TogglePin(RED_LED); // red LED
 8000e24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e28:	480d      	ldr	r0, [pc, #52]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000e2a:	f001 fda3 	bl	8002974 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_LED); // green LED
 8000e2e:	2180      	movs	r1, #128	; 0x80
 8000e30:	480d      	ldr	r0, [pc, #52]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000e32:	f001 fd9f 	bl	8002974 <HAL_GPIO_TogglePin>
}
 8000e36:	e00a      	b.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
		} else if (time == 20) {
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b14      	cmp	r3, #20
 8000e3e:	d106      	bne.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x1fa>
			HAL_GPIO_TogglePin(GREEN_LED);
 8000e40:	2180      	movs	r1, #128	; 0x80
 8000e42:	4809      	ldr	r0, [pc, #36]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000e44:	f001 fd96 	bl	8002974 <HAL_GPIO_TogglePin>
			time = 0; // cycle through
 8000e48:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x208>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	601a      	str	r2, [r3, #0]
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000478 	.word	0x20000478
 8000e5c:	20000474 	.word	0x20000474
 8000e60:	42020000 	.word	0x42020000
 8000e64:	42020400 	.word	0x42020400
 8000e68:	42020800 	.word	0x42020800
 8000e6c:	2000047c 	.word	0x2000047c

08000e70 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000e78:	e7fe      	b.n	8000e78 <Error_Handler+0x8>
	...

08000e7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e86:	4a0e      	ldr	r2, [pc, #56]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e88:	f043 0301 	orr.w	r3, r3, #1
 8000e8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_MspInit+0x44>)
 8000e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9e:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <HAL_MspInit+0x44>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_MspInit+0x44>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	603b      	str	r3, [r7, #0]
 8000eb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b0ae      	sub	sp, #184	; 0xb8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	2294      	movs	r2, #148	; 0x94
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f005 fa86 	bl	80063f6 <memset>
  if(hadc->Instance==ADC1)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <HAL_ADC_MspInit+0xa8>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d137      	bne.n	8000f64 <HAL_ADC_MspInit+0xa0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000ef4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ef8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000efa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8000efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4618      	mov	r0, r3
 8000f08:	f002 ff1a 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8000f12:	f7ff ffad 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f16:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_ADC_MspInit+0xac>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	4a15      	ldr	r2, [pc, #84]	; (8000f70 <HAL_ADC_MspInit+0xac>)
 8000f1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <HAL_ADC_MspInit+0xac>)
 8000f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2e:	4b10      	ldr	r3, [pc, #64]	; (8000f70 <HAL_ADC_MspInit+0xac>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a0f      	ldr	r2, [pc, #60]	; (8000f70 <HAL_ADC_MspInit+0xac>)
 8000f34:	f043 0304 	orr.w	r3, r3, #4
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <HAL_ADC_MspInit+0xac>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8000f46:	2304      	movs	r3, #4
 8000f48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <HAL_ADC_MspInit+0xb0>)
 8000f60:	f001 fb70 	bl	8002644 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f64:	bf00      	nop
 8000f66:	37b8      	adds	r7, #184	; 0xb8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	42028000 	.word	0x42028000
 8000f70:	40021000 	.word	0x40021000
 8000f74:	42020800 	.word	0x42020800

08000f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0ae      	sub	sp, #184	; 0xb8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	2294      	movs	r2, #148	; 0x94
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f005 fa2c 	bl	80063f6 <memset>
  if(huart->Instance==LPUART1)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a22      	ldr	r2, [pc, #136]	; (800102c <HAL_UART_MspInit+0xb4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d13d      	bne.n	8001024 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000fa8:	2320      	movs	r3, #32
 8000faa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 fec3 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fc0:	f7ff ff56 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000fc4:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <HAL_UART_MspInit+0xb8>)
 8000fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fc8:	4a19      	ldr	r2, [pc, #100]	; (8001030 <HAL_UART_MspInit+0xb8>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000fd0:	4b17      	ldr	r3, [pc, #92]	; (8001030 <HAL_UART_MspInit+0xb8>)
 8000fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fdc:	4b14      	ldr	r3, [pc, #80]	; (8001030 <HAL_UART_MspInit+0xb8>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe0:	4a13      	ldr	r2, [pc, #76]	; (8001030 <HAL_UART_MspInit+0xb8>)
 8000fe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fe6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <HAL_UART_MspInit+0xb8>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000ff4:	f001 feb6 	bl	8002d64 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_VCP_TX_Pin|ST_LINK_VCP_RX_Pin;
 8000ff8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001012:	2308      	movs	r3, #8
 8001014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001018:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800101c:	4619      	mov	r1, r3
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <HAL_UART_MspInit+0xbc>)
 8001020:	f001 fb10 	bl	8002644 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001024:	bf00      	nop
 8001026:	37b8      	adds	r7, #184	; 0xb8
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40008000 	.word	0x40008000
 8001030:	40021000 	.word	0x40021000
 8001034:	42021800 	.word	0x42021800

08001038 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b0a8      	sub	sp, #160	; 0xa0
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	2294      	movs	r2, #148	; 0x94
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f005 f9d4 	bl	80063f6 <memset>
  if(hrtc->Instance==RTC)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a16      	ldr	r2, [pc, #88]	; (80010ac <HAL_RTC_MspInit+0x74>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d124      	bne.n	80010a2 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001058:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800105c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800105e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	4618      	mov	r0, r3
 800106c:	f002 fe68 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001076:	f7ff fefb 	bl	8000e70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <HAL_RTC_MspInit+0x78>)
 800107c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001080:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <HAL_RTC_MspInit+0x78>)
 8001082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001086:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800108a:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <HAL_RTC_MspInit+0x78>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	4a08      	ldr	r2, [pc, #32]	; (80010b0 <HAL_RTC_MspInit+0x78>)
 8001090:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001094:	6593      	str	r3, [r2, #88]	; 0x58
 8001096:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <HAL_RTC_MspInit+0x78>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80010a2:	bf00      	nop
 80010a4:	37a0      	adds	r7, #160	; 0xa0
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40002800 	.word	0x40002800
 80010b0:	40021000 	.word	0x40021000

080010b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010c4:	d113      	bne.n	80010ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HAL_TIM_Base_MspInit+0x44>)
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <HAL_TIM_Base_MspInit+0x44>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6593      	str	r3, [r2, #88]	; 0x58
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_TIM_Base_MspInit+0x44>)
 80010d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010de:	2200      	movs	r2, #0
 80010e0:	2100      	movs	r1, #0
 80010e2:	202d      	movs	r0, #45	; 0x2d
 80010e4:	f001 fa79 	bl	80025da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010e8:	202d      	movs	r0, #45	; 0x2d
 80010ea:	f001 fa90 	bl	800260e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010ee:	bf00      	nop
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b0ae      	sub	sp, #184	; 0xb8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001114:	f107 0310 	add.w	r3, r7, #16
 8001118:	2294      	movs	r2, #148	; 0x94
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f005 f96a 	bl	80063f6 <memset>
  if(hpcd->Instance==USB)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a22      	ldr	r2, [pc, #136]	; (80011b0 <HAL_PCD_MspInit+0xb4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d13d      	bne.n	80011a8 <HAL_PCD_MspInit+0xac>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800112c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001130:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001132:	2300      	movs	r3, #0
 8001134:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4618      	mov	r0, r3
 800113e:	f002 fdff 	bl	8003d40 <HAL_RCCEx_PeriphCLKConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001148:	f7ff fe92 	bl	8000e70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <HAL_PCD_MspInit+0xb8>)
 800114e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001150:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <HAL_PCD_MspInit+0xb8>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_PCD_MspInit+0xb8>)
 800115a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001164:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001168:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800117e:	230a      	movs	r3, #10
 8001180:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001184:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001188:	4619      	mov	r1, r3
 800118a:	480b      	ldr	r0, [pc, #44]	; (80011b8 <HAL_PCD_MspInit+0xbc>)
 800118c:	f001 fa5a 	bl	8002644 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001190:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <HAL_PCD_MspInit+0xb8>)
 8001192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001194:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <HAL_PCD_MspInit+0xb8>)
 8001196:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800119a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <HAL_PCD_MspInit+0xb8>)
 800119e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80011a8:	bf00      	nop
 80011aa:	37b8      	adds	r7, #184	; 0xb8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	4000d400 	.word	0x4000d400
 80011b4:	40021000 	.word	0x40021000
 80011b8:	42020000 	.word	0x42020000

080011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c0:	e7fe      	b.n	80011c0 <NMI_Handler+0x4>

080011c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <HardFault_Handler+0x4>

080011c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <MemManage_Handler+0x4>

080011ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <BusFault_Handler+0x4>

080011d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <UsageFault_Handler+0x4>

080011da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011da:	b480      	push	{r7}
 80011dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001208:	f000 f94c 	bl	80014a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <TIM2_IRQHandler+0x10>)
 8001216:	f003 fcab 	bl	8004b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000014c 	.word	0x2000014c

08001224 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <SystemInit+0x20>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <SystemInit+0x20>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800124e:	4b4f      	ldr	r3, [pc, #316]	; (800138c <SystemCoreClockUpdate+0x144>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d107      	bne.n	800126a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800125a:	4b4c      	ldr	r3, [pc, #304]	; (800138c <SystemCoreClockUpdate+0x144>)
 800125c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	e005      	b.n	8001276 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800126a:	4b48      	ldr	r3, [pc, #288]	; (800138c <SystemCoreClockUpdate+0x144>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	091b      	lsrs	r3, r3, #4
 8001270:	f003 030f 	and.w	r3, r3, #15
 8001274:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001276:	4a46      	ldr	r2, [pc, #280]	; (8001390 <SystemCoreClockUpdate+0x148>)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001280:	4b42      	ldr	r3, [pc, #264]	; (800138c <SystemCoreClockUpdate+0x144>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b0c      	cmp	r3, #12
 800128a:	d866      	bhi.n	800135a <SystemCoreClockUpdate+0x112>
 800128c:	a201      	add	r2, pc, #4	; (adr r2, 8001294 <SystemCoreClockUpdate+0x4c>)
 800128e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001292:	bf00      	nop
 8001294:	080012c9 	.word	0x080012c9
 8001298:	0800135b 	.word	0x0800135b
 800129c:	0800135b 	.word	0x0800135b
 80012a0:	0800135b 	.word	0x0800135b
 80012a4:	080012d1 	.word	0x080012d1
 80012a8:	0800135b 	.word	0x0800135b
 80012ac:	0800135b 	.word	0x0800135b
 80012b0:	0800135b 	.word	0x0800135b
 80012b4:	080012d9 	.word	0x080012d9
 80012b8:	0800135b 	.word	0x0800135b
 80012bc:	0800135b 	.word	0x0800135b
 80012c0:	0800135b 	.word	0x0800135b
 80012c4:	080012e1 	.word	0x080012e1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80012c8:	4a32      	ldr	r2, [pc, #200]	; (8001394 <SystemCoreClockUpdate+0x14c>)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	6013      	str	r3, [r2, #0]
      break;
 80012ce:	e048      	b.n	8001362 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80012d0:	4b30      	ldr	r3, [pc, #192]	; (8001394 <SystemCoreClockUpdate+0x14c>)
 80012d2:	4a31      	ldr	r2, [pc, #196]	; (8001398 <SystemCoreClockUpdate+0x150>)
 80012d4:	601a      	str	r2, [r3, #0]
      break;
 80012d6:	e044      	b.n	8001362 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80012d8:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <SystemCoreClockUpdate+0x14c>)
 80012da:	4a30      	ldr	r2, [pc, #192]	; (800139c <SystemCoreClockUpdate+0x154>)
 80012dc:	601a      	str	r2, [r3, #0]
      break;
 80012de:	e040      	b.n	8001362 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80012e0:	4b2a      	ldr	r3, [pc, #168]	; (800138c <SystemCoreClockUpdate+0x144>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80012ea:	4b28      	ldr	r3, [pc, #160]	; (800138c <SystemCoreClockUpdate+0x144>)
 80012ec:	68db      	ldr	r3, [r3, #12]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	f003 030f 	and.w	r3, r3, #15
 80012f4:	3301      	adds	r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d003      	beq.n	8001306 <SystemCoreClockUpdate+0xbe>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2b03      	cmp	r3, #3
 8001302:	d006      	beq.n	8001312 <SystemCoreClockUpdate+0xca>
 8001304:	e00b      	b.n	800131e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001306:	4a24      	ldr	r2, [pc, #144]	; (8001398 <SystemCoreClockUpdate+0x150>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	613b      	str	r3, [r7, #16]
          break;
 8001310:	e00b      	b.n	800132a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001312:	4a22      	ldr	r2, [pc, #136]	; (800139c <SystemCoreClockUpdate+0x154>)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	613b      	str	r3, [r7, #16]
          break;
 800131c:	e005      	b.n	800132a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	613b      	str	r3, [r7, #16]
          break;
 8001328:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <SystemCoreClockUpdate+0x144>)
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <SystemCoreClockUpdate+0x144>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	0e5b      	lsrs	r3, r3, #25
 8001342:	f003 0303 	and.w	r3, r3, #3
 8001346:	3301      	adds	r3, #1
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	fbb2 f3f3 	udiv	r3, r2, r3
 8001354:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <SystemCoreClockUpdate+0x14c>)
 8001356:	6013      	str	r3, [r2, #0]
      break;
 8001358:	e003      	b.n	8001362 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <SystemCoreClockUpdate+0x14c>)
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	6013      	str	r3, [r2, #0]
      break;
 8001360:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001362:	4b0a      	ldr	r3, [pc, #40]	; (800138c <SystemCoreClockUpdate+0x144>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	091b      	lsrs	r3, r3, #4
 8001368:	f003 030f 	and.w	r3, r3, #15
 800136c:	4a0c      	ldr	r2, [pc, #48]	; (80013a0 <SystemCoreClockUpdate+0x158>)
 800136e:	5cd3      	ldrb	r3, [r2, r3]
 8001370:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <SystemCoreClockUpdate+0x14c>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	fa22 f303 	lsr.w	r3, r2, r3
 800137c:	4a05      	ldr	r2, [pc, #20]	; (8001394 <SystemCoreClockUpdate+0x14c>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	371c      	adds	r7, #28
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40021000 	.word	0x40021000
 8001390:	08006480 	.word	0x08006480
 8001394:	20000000 	.word	0x20000000
 8001398:	00f42400 	.word	0x00f42400
 800139c:	007a1200 	.word	0x007a1200
 80013a0:	08006468 	.word	0x08006468

080013a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013a8:	f7ff ff3c 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013ae:	e003      	b.n	80013b8 <LoopCopyDataInit>

080013b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013b6:	3104      	adds	r1, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013b8:	480a      	ldr	r0, [pc, #40]	; (80013e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013c0:	d3f6      	bcc.n	80013b0 <CopyDataInit>
	ldr	r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80013c4:	e002      	b.n	80013cc <LoopFillZerobss>

080013c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013c8:	f842 3b04 	str.w	r3, [r2], #4

080013cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <LoopForever+0x16>)
	cmp	r2, r3
 80013ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013d0:	d3f9      	bcc.n	80013c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013d2:	f005 f819 	bl	8006408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013d6:	f7ff f927 	bl	8000628 <main>

080013da <LoopForever>:

LoopForever:
    b LoopForever
 80013da:	e7fe      	b.n	80013da <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80013dc:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80013e0:	080064f8 	.word	0x080064f8
	ldr	r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013e8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80013ec:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80013f0:	20000484 	.word	0x20000484

080013f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_2_IRQHandler>

080013f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001400:	2004      	movs	r0, #4
 8001402:	f001 f8df 	bl	80025c4 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001406:	f7ff ff1f 	bl	8001248 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800140a:	2000      	movs	r0, #0
 800140c:	f000 f80e 	bl	800142c <HAL_InitTick>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d002      	beq.n	800141c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	e001      	b.n	8001420 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800141c:	f7ff fd2e 	bl	8000e7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001420:	79fb      	ldrb	r3, [r7, #7]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_InitTick+0x6c>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d023      	beq.n	8001488 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001440:	4b16      	ldr	r3, [pc, #88]	; (800149c <HAL_InitTick+0x70>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_InitTick+0x6c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f001 f8e7 	bl	800262a <HAL_SYSTICK_Config>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d10f      	bne.n	8001482 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b07      	cmp	r3, #7
 8001466:	d809      	bhi.n	800147c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001470:	f001 f8b3 	bl	80025da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001474:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <HAL_InitTick+0x74>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e007      	b.n	800148c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	e004      	b.n	800148c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	73fb      	strb	r3, [r7, #15]
 8001486:	e001      	b.n	800148c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000004 	.word	0x20000004

080014a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20000480 	.word	0x20000480

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000480 	.word	0x20000480

080014e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	431a      	orrs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	609a      	str	r2, [r3, #8]
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	431a      	orrs	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	609a      	str	r2, [r3, #8]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	3360      	adds	r3, #96	; 0x60
 800155e:	461a      	mov	r2, r3
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4413      	add	r3, r2
 8001566:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <LL_ADC_SetOffset+0x44>)
 800156e:	4013      	ands	r3, r2
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	4313      	orrs	r3, r2
 800157c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001584:	bf00      	nop
 8001586:	371c      	adds	r7, #28
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	03fff000 	.word	0x03fff000

08001594 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3360      	adds	r3, #96	; 0x60
 80015a2:	461a      	mov	r2, r3
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	4413      	add	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b087      	sub	sp, #28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	3360      	adds	r3, #96	; 0x60
 80015d0:	461a      	mov	r2, r3
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	431a      	orrs	r2, r3
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015ea:	bf00      	nop
 80015ec:	371c      	adds	r7, #28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80015f6:	b480      	push	{r7}
 80015f8:	b083      	sub	sp, #12
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	615a      	str	r2, [r3, #20]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800161c:	b480      	push	{r7}
 800161e:	b087      	sub	sp, #28
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	3330      	adds	r3, #48	; 0x30
 800162c:	461a      	mov	r2, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	0a1b      	lsrs	r3, r3, #8
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	f003 030c 	and.w	r3, r3, #12
 8001638:	4413      	add	r3, r2
 800163a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	f003 031f 	and.w	r3, r3, #31
 8001646:	211f      	movs	r1, #31
 8001648:	fa01 f303 	lsl.w	r3, r1, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	401a      	ands	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	0e9b      	lsrs	r3, r3, #26
 8001654:	f003 011f 	and.w	r1, r3, #31
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	f003 031f 	and.w	r3, r3, #31
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	431a      	orrs	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001668:	bf00      	nop
 800166a:	371c      	adds	r7, #28
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001674:	b480      	push	{r7}
 8001676:	b087      	sub	sp, #28
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3314      	adds	r3, #20
 8001684:	461a      	mov	r2, r3
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	0e5b      	lsrs	r3, r3, #25
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	4413      	add	r3, r2
 8001692:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	0d1b      	lsrs	r3, r3, #20
 800169c:	f003 031f 	and.w	r3, r3, #31
 80016a0:	2107      	movs	r1, #7
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	401a      	ands	r2, r3
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	0d1b      	lsrs	r3, r3, #20
 80016ae:	f003 031f 	and.w	r3, r3, #31
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	fa01 f303 	lsl.w	r3, r1, r3
 80016b8:	431a      	orrs	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016be:	bf00      	nop
 80016c0:	371c      	adds	r7, #28
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
	...

080016cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016e4:	43db      	mvns	r3, r3
 80016e6:	401a      	ands	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0318 	and.w	r3, r3, #24
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <LL_ADC_SetChannelSingleDiff+0x44>)
 80016f0:	40d9      	lsrs	r1, r3
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	400b      	ands	r3, r1
 80016f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80016fa:	431a      	orrs	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001702:	bf00      	nop
 8001704:	3714      	adds	r7, #20
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	0007ffff 	.word	0x0007ffff

08001714 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001724:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6093      	str	r3, [r2, #8]
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001748:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800174c:	d101      	bne.n	8001752 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001770:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001774:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001798:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800179c:	d101      	bne.n	80017a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800179e:	2301      	movs	r3, #1
 80017a0:	e000      	b.n	80017a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d101      	bne.n	80017c8 <LL_ADC_IsEnabled+0x18>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <LL_ADC_IsEnabled+0x1a>
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017d6:	b480      	push	{r7}
 80017d8:	b083      	sub	sp, #12
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	2b04      	cmp	r3, #4
 80017e8:	d101      	bne.n	80017ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f003 0308 	and.w	r3, r3, #8
 800180c:	2b08      	cmp	r3, #8
 800180e:	d101      	bne.n	8001814 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800182c:	2300      	movs	r3, #0
 800182e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e12e      	b.n	8001a9c <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	2b00      	cmp	r3, #0
 800184a:	d109      	bne.n	8001860 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff fb39 	bl	8000ec4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff67 	bl	8001738 <LL_ADC_IsDeepPowerDownEnabled>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d004      	beq.n	800187a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff4d 	bl	8001714 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff82 	bl	8001788 <LL_ADC_IsInternalRegulatorEnabled>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d115      	bne.n	80018b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff66 	bl	8001760 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001894:	4b83      	ldr	r3, [pc, #524]	; (8001aa4 <HAL_ADC_Init+0x280>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	099b      	lsrs	r3, r3, #6
 800189a:	4a83      	ldr	r2, [pc, #524]	; (8001aa8 <HAL_ADC_Init+0x284>)
 800189c:	fba2 2303 	umull	r2, r3, r2, r3
 80018a0:	099b      	lsrs	r3, r3, #6
 80018a2:	3301      	adds	r3, #1
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018a8:	e002      	b.n	80018b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f9      	bne.n	80018aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff ff64 	bl	8001788 <LL_ADC_IsInternalRegulatorEnabled>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10d      	bne.n	80018e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	f043 0210 	orr.w	r2, r3, #16
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d6:	f043 0201 	orr.w	r2, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff ff75 	bl	80017d6 <LL_ADC_REG_IsConversionOngoing>
 80018ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f2:	f003 0310 	and.w	r3, r3, #16
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f040 80c7 	bne.w	8001a8a <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 80c3 	bne.w	8001a8a <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001908:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800190c:	f043 0202 	orr.w	r2, r3, #2
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff49 	bl	80017b0 <LL_ADC_IsEnabled>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d110      	bne.n	8001946 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001924:	4861      	ldr	r0, [pc, #388]	; (8001aac <HAL_ADC_Init+0x288>)
 8001926:	f7ff ff43 	bl	80017b0 <LL_ADC_IsEnabled>
 800192a:	4604      	mov	r4, r0
 800192c:	4860      	ldr	r0, [pc, #384]	; (8001ab0 <HAL_ADC_Init+0x28c>)
 800192e:	f7ff ff3f 	bl	80017b0 <LL_ADC_IsEnabled>
 8001932:	4603      	mov	r3, r0
 8001934:	4323      	orrs	r3, r4
 8001936:	2b00      	cmp	r3, #0
 8001938:	d105      	bne.n	8001946 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	4619      	mov	r1, r3
 8001940:	485c      	ldr	r0, [pc, #368]	; (8001ab4 <HAL_ADC_Init+0x290>)
 8001942:	f7ff fdcf 	bl	80014e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	7e5b      	ldrb	r3, [r3, #25]
 800194a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001950:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001956:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800195c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001964:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d106      	bne.n	8001982 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	3b01      	subs	r3, #1
 800197a:	045b      	lsls	r3, r3, #17
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	2b00      	cmp	r3, #0
 8001988:	d009      	beq.n	800199e <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198e:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4313      	orrs	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <HAL_ADC_Init+0x294>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	69b9      	ldr	r1, [r7, #24]
 80019ae:	430b      	orrs	r3, r1
 80019b0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f7ff ff20 	bl	80017fc <LL_ADC_INJ_IsConversionOngoing>
 80019bc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d140      	bne.n	8001a46 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d13d      	bne.n	8001a46 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	7e1b      	ldrb	r3, [r3, #24]
 80019d2:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019d4:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019dc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019ec:	f023 0306 	bic.w	r3, r3, #6
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	69b9      	ldr	r1, [r7, #24]
 80019f6:	430b      	orrs	r3, r1
 80019f8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d118      	bne.n	8001a36 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a0e:	f023 0304 	bic.w	r3, r3, #4
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a1a:	4311      	orrs	r1, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a20:	4311      	orrs	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a26:	430a      	orrs	r2, r1
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0201 	orr.w	r2, r2, #1
 8001a32:	611a      	str	r2, [r3, #16]
 8001a34:	e007      	b.n	8001a46 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0201 	bic.w	r2, r2, #1
 8001a44:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d10c      	bne.n	8001a68 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	f023 010f 	bic.w	r1, r3, #15
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	1e5a      	subs	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	631a      	str	r2, [r3, #48]	; 0x30
 8001a66:	e007      	b.n	8001a78 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 020f 	bic.w	r2, r2, #15
 8001a76:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a7c:	f023 0303 	bic.w	r3, r3, #3
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	659a      	str	r2, [r3, #88]	; 0x58
 8001a88:	e007      	b.n	8001a9a <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	f043 0210 	orr.w	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3724      	adds	r7, #36	; 0x24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd90      	pop	{r4, r7, pc}
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	053e2d63 	.word	0x053e2d63
 8001aac:	42028000 	.word	0x42028000
 8001ab0:	42028100 	.word	0x42028100
 8001ab4:	42028300 	.word	0x42028300
 8001ab8:	fff0c007 	.word	0xfff0c007

08001abc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b0b7      	sub	sp, #220	; 0xdc
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d101      	bne.n	8001ade <HAL_ADC_ConfigChannel+0x22>
 8001ada:	2302      	movs	r3, #2
 8001adc:	e3c1      	b.n	8002262 <HAL_ADC_ConfigChannel+0x7a6>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fe73 	bl	80017d6 <LL_ADC_REG_IsConversionOngoing>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f040 83a6 	bne.w	8002244 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6818      	ldr	r0, [r3, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	6859      	ldr	r1, [r3, #4]
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	461a      	mov	r2, r3
 8001b06:	f7ff fd89 	bl	800161c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fe61 	bl	80017d6 <LL_ADC_REG_IsConversionOngoing>
 8001b14:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fe6d 	bl	80017fc <LL_ADC_INJ_IsConversionOngoing>
 8001b22:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f040 81c1 	bne.w	8001eb2 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 81bc 	bne.w	8001eb2 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b42:	d10f      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	4619      	mov	r1, r3
 8001b50:	f7ff fd90 	bl	8001674 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fd4a 	bl	80015f6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001b62:	e00e      	b.n	8001b82 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6818      	ldr	r0, [r3, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	6819      	ldr	r1, [r3, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	461a      	mov	r2, r3
 8001b72:	f7ff fd7f 	bl	8001674 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fd3a 	bl	80015f6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	08db      	lsrs	r3, r3, #3
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	691b      	ldr	r3, [r3, #16]
 8001ba0:	2b04      	cmp	r3, #4
 8001ba2:	d00a      	beq.n	8001bba <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	6919      	ldr	r1, [r3, #16]
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bb4:	f7ff fcca 	bl	800154c <LL_ADC_SetOffset>
 8001bb8:	e17b      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fce7 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10a      	bne.n	8001be6 <HAL_ADC_ConfigChannel+0x12a>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fcdc 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	0e9b      	lsrs	r3, r3, #26
 8001be0:	f003 021f 	and.w	r2, r3, #31
 8001be4:	e01e      	b.n	8001c24 <HAL_ADC_ConfigChannel+0x168>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2100      	movs	r1, #0
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fcd1 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001bfc:	fa93 f3a3 	rbit	r3, r3
 8001c00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c08:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8001c14:	2320      	movs	r3, #32
 8001c16:	e004      	b.n	8001c22 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8001c18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001c1c:	fab3 f383 	clz	r3, r3
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <HAL_ADC_ConfigChannel+0x180>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	0e9b      	lsrs	r3, r3, #26
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	e018      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x1b2>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c48:	fa93 f3a3 	rbit	r3, r3
 8001c4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001c50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001c58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8001c60:	2320      	movs	r3, #32
 8001c62:	e004      	b.n	8001c6e <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8001c64:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c68:	fab3 f383 	clz	r3, r3
 8001c6c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d106      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fca0 	bl	80015c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2101      	movs	r1, #1
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fc84 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10a      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x1f0>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff fc79 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	0e9b      	lsrs	r3, r3, #26
 8001ca6:	f003 021f 	and.w	r2, r3, #31
 8001caa:	e01e      	b.n	8001cea <HAL_ADC_ConfigChannel+0x22e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fc6e 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cc2:	fa93 f3a3 	rbit	r3, r3
 8001cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001cca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001cd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8001cda:	2320      	movs	r3, #32
 8001cdc:	e004      	b.n	8001ce8 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8001cde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ce2:	fab3 f383 	clz	r3, r3
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d105      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x246>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	0e9b      	lsrs	r3, r3, #26
 8001cfc:	f003 031f 	and.w	r3, r3, #31
 8001d00:	e018      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x278>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001d16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001d1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8001d26:	2320      	movs	r3, #32
 8001d28:	e004      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8001d2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d2e:	fab3 f383 	clz	r3, r3
 8001d32:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d106      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2101      	movs	r1, #1
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fc3d 	bl	80015c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2102      	movs	r1, #2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fc21 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d10a      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x2b6>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2102      	movs	r1, #2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fc16 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	0e9b      	lsrs	r3, r3, #26
 8001d6c:	f003 021f 	and.w	r2, r3, #31
 8001d70:	e01e      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x2f4>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2102      	movs	r1, #2
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fc0b 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d88:	fa93 f3a3 	rbit	r3, r3
 8001d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001d98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d101      	bne.n	8001da4 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8001da0:	2320      	movs	r3, #32
 8001da2:	e004      	b.n	8001dae <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8001da4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001da8:	fab3 f383 	clz	r3, r3
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d105      	bne.n	8001dc8 <HAL_ADC_ConfigChannel+0x30c>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	0e9b      	lsrs	r3, r3, #26
 8001dc2:	f003 031f 	and.w	r3, r3, #31
 8001dc6:	e016      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x33a>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001dda:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8001de8:	2320      	movs	r3, #32
 8001dea:	e004      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8001dec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001df0:	fab3 f383 	clz	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d106      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2102      	movs	r1, #2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fbdc 	bl	80015c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2103      	movs	r1, #3
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fbc0 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10a      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x378>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2103      	movs	r1, #3
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fbb5 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	0e9b      	lsrs	r3, r3, #26
 8001e2e:	f003 021f 	and.w	r2, r3, #31
 8001e32:	e017      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x3a8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2103      	movs	r1, #3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fbaa 	bl	8001594 <LL_ADC_GetOffsetChannel>
 8001e40:	4603      	mov	r3, r0
 8001e42:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e46:	fa93 f3a3 	rbit	r3, r3
 8001e4a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001e4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e4e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 8001e56:	2320      	movs	r3, #32
 8001e58:	e003      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8001e5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e5c:	fab3 f383 	clz	r3, r3
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d105      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x3c0>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	0e9b      	lsrs	r3, r3, #26
 8001e76:	f003 031f 	and.w	r3, r3, #31
 8001e7a:	e011      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x3e4>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e84:	fa93 f3a3 	rbit	r3, r3
 8001e88:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001e8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 8001e94:	2320      	movs	r3, #32
 8001e96:	e003      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 8001e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e9a:	fab3 f383 	clz	r3, r3
 8001e9e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d106      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	2103      	movs	r1, #3
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fb87 	bl	80015c0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fc7a 	bl	80017b0 <LL_ADC_IsEnabled>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f040 81c9 	bne.w	8002256 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	6819      	ldr	r1, [r3, #0]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	f7ff fbfb 	bl	80016cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	4a8f      	ldr	r2, [pc, #572]	; (8002118 <HAL_ADC_ConfigChannel+0x65c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	f040 8131 	bne.w	8002144 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10b      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x44e>
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	0e9b      	lsrs	r3, r3, #26
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f003 031f 	and.w	r3, r3, #31
 8001efe:	2b09      	cmp	r3, #9
 8001f00:	bf94      	ite	ls
 8001f02:	2301      	movls	r3, #1
 8001f04:	2300      	movhi	r3, #0
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	e019      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x482>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f1a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001f1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8001f22:	2320      	movs	r3, #32
 8001f24:	e003      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8001f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	3301      	adds	r3, #1
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	2b09      	cmp	r3, #9
 8001f36:	bf94      	ite	ls
 8001f38:	2301      	movls	r3, #1
 8001f3a:	2300      	movhi	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d079      	beq.n	8002036 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d107      	bne.n	8001f5e <HAL_ADC_ConfigChannel+0x4a2>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	0e9b      	lsrs	r3, r3, #26
 8001f54:	3301      	adds	r3, #1
 8001f56:	069b      	lsls	r3, r3, #26
 8001f58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f5c:	e015      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x4ce>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001f76:	2320      	movs	r3, #32
 8001f78:	e003      	b.n	8001f82 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	3301      	adds	r3, #1
 8001f84:	069b      	lsls	r3, r3, #26
 8001f86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_ADC_ConfigChannel+0x4ee>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	0e9b      	lsrs	r3, r3, #26
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	e017      	b.n	8001fda <HAL_ADC_ConfigChannel+0x51e>
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fb2:	fa93 f3a3 	rbit	r3, r3
 8001fb6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fba:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8001fc2:	2320      	movs	r3, #32
 8001fc4:	e003      	b.n	8001fce <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8001fc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fc8:	fab3 f383 	clz	r3, r3
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	ea42 0103 	orr.w	r1, r2, r3
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10a      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x544>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	0e9b      	lsrs	r3, r3, #26
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f003 021f 	and.w	r2, r3, #31
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	4413      	add	r3, r2
 8001ffc:	051b      	lsls	r3, r3, #20
 8001ffe:	e018      	b.n	8002032 <HAL_ADC_ConfigChannel+0x576>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800200e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002010:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002018:	2320      	movs	r3, #32
 800201a:	e003      	b.n	8002024 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800201c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800201e:	fab3 f383 	clz	r3, r3
 8002022:	b2db      	uxtb	r3, r3
 8002024:	3301      	adds	r3, #1
 8002026:	f003 021f 	and.w	r2, r3, #31
 800202a:	4613      	mov	r3, r2
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	4413      	add	r3, r2
 8002030:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002032:	430b      	orrs	r3, r1
 8002034:	e081      	b.n	800213a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203e:	2b00      	cmp	r3, #0
 8002040:	d107      	bne.n	8002052 <HAL_ADC_ConfigChannel+0x596>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	0e9b      	lsrs	r3, r3, #26
 8002048:	3301      	adds	r3, #1
 800204a:	069b      	lsls	r3, r3, #26
 800204c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002050:	e015      	b.n	800207e <HAL_ADC_ConfigChannel+0x5c2>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 800206a:	2320      	movs	r3, #32
 800206c:	e003      	b.n	8002076 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 800206e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	3301      	adds	r3, #1
 8002078:	069b      	lsls	r3, r3, #26
 800207a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_ADC_ConfigChannel+0x5e2>
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	0e9b      	lsrs	r3, r3, #26
 8002090:	3301      	adds	r3, #1
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	2101      	movs	r1, #1
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	e017      	b.n	80020ce <HAL_ADC_ConfigChannel+0x612>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	61fb      	str	r3, [r7, #28]
  return result;
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80020b6:	2320      	movs	r3, #32
 80020b8:	e003      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	3301      	adds	r3, #1
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	2101      	movs	r1, #1
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	ea42 0103 	orr.w	r1, r2, r3
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10d      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x63e>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	0e9b      	lsrs	r3, r3, #26
 80020e4:	3301      	adds	r3, #1
 80020e6:	f003 021f 	and.w	r2, r3, #31
 80020ea:	4613      	mov	r3, r2
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	4413      	add	r3, r2
 80020f0:	3b1e      	subs	r3, #30
 80020f2:	051b      	lsls	r3, r3, #20
 80020f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020f8:	e01e      	b.n	8002138 <HAL_ADC_ConfigChannel+0x67c>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	fa93 f3a3 	rbit	r3, r3
 8002106:	613b      	str	r3, [r7, #16]
  return result;
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d104      	bne.n	800211c <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8002112:	2320      	movs	r3, #32
 8002114:	e006      	b.n	8002124 <HAL_ADC_ConfigChannel+0x668>
 8002116:	bf00      	nop
 8002118:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	3301      	adds	r3, #1
 8002126:	f003 021f 	and.w	r2, r3, #31
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	3b1e      	subs	r3, #30
 8002132:	051b      	lsls	r3, r3, #20
 8002134:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002138:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800213e:	4619      	mov	r1, r3
 8002140:	f7ff fa98 	bl	8001674 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b48      	ldr	r3, [pc, #288]	; (800226c <HAL_ADC_ConfigChannel+0x7b0>)
 800214a:	4013      	ands	r3, r2
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 8082 	beq.w	8002256 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002152:	4847      	ldr	r0, [pc, #284]	; (8002270 <HAL_ADC_ConfigChannel+0x7b4>)
 8002154:	f7ff f9ec 	bl	8001530 <LL_ADC_GetCommonPathInternalCh>
 8002158:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800215c:	4845      	ldr	r0, [pc, #276]	; (8002274 <HAL_ADC_ConfigChannel+0x7b8>)
 800215e:	f7ff fb27 	bl	80017b0 <LL_ADC_IsEnabled>
 8002162:	4604      	mov	r4, r0
 8002164:	4844      	ldr	r0, [pc, #272]	; (8002278 <HAL_ADC_ConfigChannel+0x7bc>)
 8002166:	f7ff fb23 	bl	80017b0 <LL_ADC_IsEnabled>
 800216a:	4603      	mov	r3, r0
 800216c:	4323      	orrs	r3, r4
 800216e:	2b00      	cmp	r3, #0
 8002170:	d15e      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a41      	ldr	r2, [pc, #260]	; (800227c <HAL_ADC_ConfigChannel+0x7c0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d127      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800217c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002180:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d121      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a39      	ldr	r2, [pc, #228]	; (8002274 <HAL_ADC_ConfigChannel+0x7b8>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d161      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002192:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002196:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800219a:	4619      	mov	r1, r3
 800219c:	4834      	ldr	r0, [pc, #208]	; (8002270 <HAL_ADC_ConfigChannel+0x7b4>)
 800219e:	f7ff f9b4 	bl	800150a <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80021a2:	4b37      	ldr	r3, [pc, #220]	; (8002280 <HAL_ADC_ConfigChannel+0x7c4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	099b      	lsrs	r3, r3, #6
 80021a8:	4a36      	ldr	r2, [pc, #216]	; (8002284 <HAL_ADC_ConfigChannel+0x7c8>)
 80021aa:	fba2 2303 	umull	r2, r3, r2, r3
 80021ae:	099b      	lsrs	r3, r3, #6
 80021b0:	1c5a      	adds	r2, r3, #1
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80021ba:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80021bc:	e002      	b.n	80021c4 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f9      	bne.n	80021be <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021ca:	e044      	b.n	8002256 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a2d      	ldr	r2, [pc, #180]	; (8002288 <HAL_ADC_ConfigChannel+0x7cc>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d113      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80021d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10d      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a23      	ldr	r2, [pc, #140]	; (8002274 <HAL_ADC_ConfigChannel+0x7b8>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d134      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80021f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f4:	4619      	mov	r1, r3
 80021f6:	481e      	ldr	r0, [pc, #120]	; (8002270 <HAL_ADC_ConfigChannel+0x7b4>)
 80021f8:	f7ff f987 	bl	800150a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021fc:	e02b      	b.n	8002256 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a22      	ldr	r2, [pc, #136]	; (800228c <HAL_ADC_ConfigChannel+0x7d0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d126      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002208:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800220c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d120      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a16      	ldr	r2, [pc, #88]	; (8002274 <HAL_ADC_ConfigChannel+0x7b8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d11b      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800221e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002222:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002226:	4619      	mov	r1, r3
 8002228:	4811      	ldr	r0, [pc, #68]	; (8002270 <HAL_ADC_ConfigChannel+0x7b4>)
 800222a:	f7ff f96e 	bl	800150a <LL_ADC_SetCommonPathInternalCh>
 800222e:	e012      	b.n	8002256 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	f043 0220 	orr.w	r2, r3, #32
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002242:	e008      	b.n	8002256 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002248:	f043 0220 	orr.w	r2, r3, #32
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800225e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002262:	4618      	mov	r0, r3
 8002264:	37dc      	adds	r7, #220	; 0xdc
 8002266:	46bd      	mov	sp, r7
 8002268:	bd90      	pop	{r4, r7, pc}
 800226a:	bf00      	nop
 800226c:	80080000 	.word	0x80080000
 8002270:	42028300 	.word	0x42028300
 8002274:	42028000 	.word	0x42028000
 8002278:	42028100 	.word	0x42028100
 800227c:	c7520000 	.word	0xc7520000
 8002280:	20000000 	.word	0x20000000
 8002284:	053e2d63 	.word	0x053e2d63
 8002288:	cb840000 	.word	0xcb840000
 800228c:	80000001 	.word	0x80000001

08002290 <LL_ADC_IsEnabled>:
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d101      	bne.n	80022a8 <LL_ADC_IsEnabled+0x18>
 80022a4:	2301      	movs	r3, #1
 80022a6:	e000      	b.n	80022aa <LL_ADC_IsEnabled+0x1a>
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <LL_ADC_REG_IsConversionOngoing>:
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d101      	bne.n	80022ce <LL_ADC_REG_IsConversionOngoing+0x18>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80022dc:	b590      	push	{r4, r7, lr}
 80022de:	b0a1      	sub	sp, #132	; 0x84
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e089      	b.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002302:	2300      	movs	r3, #0
 8002304:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002306:	2300      	movs	r3, #0
 8002308:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a42      	ldr	r2, [pc, #264]	; (8002418 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d102      	bne.n	800231a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002314:	4b41      	ldr	r3, [pc, #260]	; (800241c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002316:	60fb      	str	r3, [r7, #12]
 8002318:	e001      	b.n	800231e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10b      	bne.n	800233c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002328:	f043 0220 	orr.w	r2, r3, #32
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e068      	b.n	800240e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ffb9 	bl	80022b6 <LL_ADC_REG_IsConversionOngoing>
 8002344:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff ffb3 	bl	80022b6 <LL_ADC_REG_IsConversionOngoing>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d14a      	bne.n	80023ec <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002358:	2b00      	cmp	r3, #0
 800235a:	d147      	bne.n	80023ec <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800235c:	4b30      	ldr	r3, [pc, #192]	; (8002420 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800235e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d027      	beq.n	80023b8 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800237a:	035b      	lsls	r3, r3, #13
 800237c:	430b      	orrs	r3, r1
 800237e:	431a      	orrs	r2, r3
 8002380:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002382:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002384:	4824      	ldr	r0, [pc, #144]	; (8002418 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8002386:	f7ff ff83 	bl	8002290 <LL_ADC_IsEnabled>
 800238a:	4604      	mov	r4, r0
 800238c:	4823      	ldr	r0, [pc, #140]	; (800241c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800238e:	f7ff ff7f 	bl	8002290 <LL_ADC_IsEnabled>
 8002392:	4603      	mov	r3, r0
 8002394:	4323      	orrs	r3, r4
 8002396:	2b00      	cmp	r3, #0
 8002398:	d132      	bne.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800239a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023a2:	f023 030f 	bic.w	r3, r3, #15
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	6811      	ldr	r1, [r2, #0]
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	6892      	ldr	r2, [r2, #8]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	431a      	orrs	r2, r3
 80023b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023b4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023b6:	e023      	b.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023c4:	4814      	ldr	r0, [pc, #80]	; (8002418 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80023c6:	f7ff ff63 	bl	8002290 <LL_ADC_IsEnabled>
 80023ca:	4604      	mov	r4, r0
 80023cc:	4813      	ldr	r0, [pc, #76]	; (800241c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80023ce:	f7ff ff5f 	bl	8002290 <LL_ADC_IsEnabled>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4323      	orrs	r3, r4
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d112      	bne.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80023da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023e2:	f023 030f 	bic.w	r3, r3, #15
 80023e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80023e8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80023ea:	e009      	b.n	8002400 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f0:	f043 0220 	orr.w	r2, r3, #32
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80023fe:	e000      	b.n	8002402 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002400:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800240a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800240e:	4618      	mov	r0, r3
 8002410:	3784      	adds	r7, #132	; 0x84
 8002412:	46bd      	mov	sp, r7
 8002414:	bd90      	pop	{r4, r7, pc}
 8002416:	bf00      	nop
 8002418:	42028000 	.word	0x42028000
 800241c:	42028100 	.word	0x42028100
 8002420:	42028300 	.word	0x42028300

08002424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <__NVIC_SetPriorityGrouping+0x44>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800243a:	68ba      	ldr	r2, [r7, #8]
 800243c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002440:	4013      	ands	r3, r2
 8002442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800244c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002450:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002456:	4a04      	ldr	r2, [pc, #16]	; (8002468 <__NVIC_SetPriorityGrouping+0x44>)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	60d3      	str	r3, [r2, #12]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <__NVIC_GetPriorityGrouping+0x18>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	0a1b      	lsrs	r3, r3, #8
 8002476:	f003 0307 	and.w	r3, r3, #7
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002496:	2b00      	cmp	r3, #0
 8002498:	db0b      	blt.n	80024b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	f003 021f 	and.w	r2, r3, #31
 80024a0:	4907      	ldr	r1, [pc, #28]	; (80024c0 <__NVIC_EnableIRQ+0x38>)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2001      	movs	r0, #1
 80024aa:	fa00 f202 	lsl.w	r2, r0, r2
 80024ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80024b2:	bf00      	nop
 80024b4:	370c      	adds	r7, #12
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000e100 	.word	0xe000e100

080024c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	6039      	str	r1, [r7, #0]
 80024ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	db0a      	blt.n	80024ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	490c      	ldr	r1, [pc, #48]	; (8002510 <__NVIC_SetPriority+0x4c>)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	0152      	lsls	r2, r2, #5
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	440b      	add	r3, r1
 80024e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ec:	e00a      	b.n	8002504 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	4908      	ldr	r1, [pc, #32]	; (8002514 <__NVIC_SetPriority+0x50>)
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	3b04      	subs	r3, #4
 80024fc:	0152      	lsls	r2, r2, #5
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	440b      	add	r3, r1
 8002502:	761a      	strb	r2, [r3, #24]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	e000e100 	.word	0xe000e100
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f1c3 0307 	rsb	r3, r3, #7
 8002532:	2b03      	cmp	r3, #3
 8002534:	bf28      	it	cs
 8002536:	2303      	movcs	r3, #3
 8002538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	3303      	adds	r3, #3
 800253e:	2b06      	cmp	r3, #6
 8002540:	d902      	bls.n	8002548 <NVIC_EncodePriority+0x30>
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3b04      	subs	r3, #4
 8002546:	e000      	b.n	800254a <NVIC_EncodePriority+0x32>
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800254c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43da      	mvns	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	401a      	ands	r2, r3
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002560:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	fa01 f303 	lsl.w	r3, r1, r3
 800256a:	43d9      	mvns	r1, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002570:	4313      	orrs	r3, r2
         );
}
 8002572:	4618      	mov	r0, r3
 8002574:	3724      	adds	r7, #36	; 0x24
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002590:	d301      	bcc.n	8002596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002592:	2301      	movs	r3, #1
 8002594:	e00f      	b.n	80025b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <SysTick_Config+0x40>)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3b01      	subs	r3, #1
 800259c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800259e:	2107      	movs	r1, #7
 80025a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025a4:	f7ff ff8e 	bl	80024c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a8:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <SysTick_Config+0x40>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ae:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <SysTick_Config+0x40>)
 80025b0:	2207      	movs	r2, #7
 80025b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	e000e010 	.word	0xe000e010

080025c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff ff29 	bl	8002424 <__NVIC_SetPriorityGrouping>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b086      	sub	sp, #24
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	607a      	str	r2, [r7, #4]
 80025e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025e8:	f7ff ff40 	bl	800246c <__NVIC_GetPriorityGrouping>
 80025ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68b9      	ldr	r1, [r7, #8]
 80025f2:	6978      	ldr	r0, [r7, #20]
 80025f4:	f7ff ff90 	bl	8002518 <NVIC_EncodePriority>
 80025f8:	4602      	mov	r2, r0
 80025fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff5f 	bl	80024c4 <__NVIC_SetPriority>
}
 8002606:	bf00      	nop
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b082      	sub	sp, #8
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff33 	bl	8002488 <__NVIC_EnableIRQ>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800262a:	b580      	push	{r7, lr}
 800262c:	b082      	sub	sp, #8
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff ffa4 	bl	8002580 <SysTick_Config>
 8002638:	4603      	mov	r3, r0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002644:	b480      	push	{r7}
 8002646:	b087      	sub	sp, #28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002652:	e158      	b.n	8002906 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	2101      	movs	r1, #1
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	fa01 f303 	lsl.w	r3, r1, r3
 8002660:	4013      	ands	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b00      	cmp	r3, #0
 8002668:	f000 814a 	beq.w	8002900 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b01      	cmp	r3, #1
 8002676:	d005      	beq.n	8002684 <HAL_GPIO_Init+0x40>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0303 	and.w	r3, r3, #3
 8002680:	2b02      	cmp	r3, #2
 8002682:	d130      	bne.n	80026e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	2203      	movs	r2, #3
 8002690:	fa02 f303 	lsl.w	r3, r2, r3
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	68da      	ldr	r2, [r3, #12]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80026ba:	2201      	movs	r2, #1
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4013      	ands	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	f003 0201 	and.w	r2, r3, #1
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d017      	beq.n	8002722 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	2203      	movs	r2, #3
 80026fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002702:	43db      	mvns	r3, r3
 8002704:	693a      	ldr	r2, [r7, #16]
 8002706:	4013      	ands	r3, r2
 8002708:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689a      	ldr	r2, [r3, #8]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	fa02 f303 	lsl.w	r3, r2, r3
 8002716:	693a      	ldr	r2, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d123      	bne.n	8002776 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	08da      	lsrs	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	3208      	adds	r2, #8
 8002736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800273a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	220f      	movs	r2, #15
 8002746:	fa02 f303 	lsl.w	r3, r2, r3
 800274a:	43db      	mvns	r3, r3
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	4013      	ands	r3, r2
 8002750:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	691a      	ldr	r2, [r3, #16]
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	fa02 f303 	lsl.w	r3, r2, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4313      	orrs	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	08da      	lsrs	r2, r3, #3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3208      	adds	r2, #8
 8002770:	6939      	ldr	r1, [r7, #16]
 8002772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	2203      	movs	r2, #3
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	43db      	mvns	r3, r3
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 0203 	and.w	r2, r3, #3
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80a4 	beq.w	8002900 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80027b8:	4a5a      	ldr	r2, [pc, #360]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	089b      	lsrs	r3, r3, #2
 80027be:	3318      	adds	r3, #24
 80027c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027c4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	220f      	movs	r2, #15
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4013      	ands	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a52      	ldr	r2, [pc, #328]	; (8002928 <HAL_GPIO_Init+0x2e4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d025      	beq.n	8002830 <HAL_GPIO_Init+0x1ec>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a51      	ldr	r2, [pc, #324]	; (800292c <HAL_GPIO_Init+0x2e8>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d01f      	beq.n	800282c <HAL_GPIO_Init+0x1e8>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a50      	ldr	r2, [pc, #320]	; (8002930 <HAL_GPIO_Init+0x2ec>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d019      	beq.n	8002828 <HAL_GPIO_Init+0x1e4>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a4f      	ldr	r2, [pc, #316]	; (8002934 <HAL_GPIO_Init+0x2f0>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d013      	beq.n	8002824 <HAL_GPIO_Init+0x1e0>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a4e      	ldr	r2, [pc, #312]	; (8002938 <HAL_GPIO_Init+0x2f4>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d00d      	beq.n	8002820 <HAL_GPIO_Init+0x1dc>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a4d      	ldr	r2, [pc, #308]	; (800293c <HAL_GPIO_Init+0x2f8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d007      	beq.n	800281c <HAL_GPIO_Init+0x1d8>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a4c      	ldr	r2, [pc, #304]	; (8002940 <HAL_GPIO_Init+0x2fc>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d101      	bne.n	8002818 <HAL_GPIO_Init+0x1d4>
 8002814:	2306      	movs	r3, #6
 8002816:	e00c      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 8002818:	2307      	movs	r3, #7
 800281a:	e00a      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 800281c:	2305      	movs	r3, #5
 800281e:	e008      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 8002820:	2304      	movs	r3, #4
 8002822:	e006      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 8002824:	2303      	movs	r3, #3
 8002826:	e004      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 8002828:	2302      	movs	r3, #2
 800282a:	e002      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <HAL_GPIO_Init+0x1ee>
 8002830:	2300      	movs	r3, #0
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	f002 0203 	and.w	r2, r2, #3
 8002838:	00d2      	lsls	r2, r2, #3
 800283a:	4093      	lsls	r3, r2
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002842:	4938      	ldr	r1, [pc, #224]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	089b      	lsrs	r3, r3, #2
 8002848:	3318      	adds	r3, #24
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002850:	4b34      	ldr	r3, [pc, #208]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	43db      	mvns	r3, r3
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4013      	ands	r3, r2
 800285e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800286c:	693a      	ldr	r2, [r7, #16]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002874:	4a2b      	ldr	r2, [pc, #172]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800287a:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	43db      	mvns	r3, r3
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4013      	ands	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800289e:	4a21      	ldr	r2, [pc, #132]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80028a4:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 80028a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	4013      	ands	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80028ca:	4a16      	ldr	r2, [pc, #88]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80028d2:	4b14      	ldr	r3, [pc, #80]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 80028d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	43db      	mvns	r3, r3
 80028de:	693a      	ldr	r2, [r7, #16]
 80028e0:	4013      	ands	r3, r2
 80028e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d003      	beq.n	80028f8 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80028f8:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <HAL_GPIO_Init+0x2e0>)
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	3301      	adds	r3, #1
 8002904:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	fa22 f303 	lsr.w	r3, r2, r3
 8002910:	2b00      	cmp	r3, #0
 8002912:	f47f ae9f 	bne.w	8002654 <HAL_GPIO_Init+0x10>
  }
}
 8002916:	bf00      	nop
 8002918:	bf00      	nop
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	4002f400 	.word	0x4002f400
 8002928:	42020000 	.word	0x42020000
 800292c:	42020400 	.word	0x42020400
 8002930:	42020800 	.word	0x42020800
 8002934:	42020c00 	.word	0x42020c00
 8002938:	42021000 	.word	0x42021000
 800293c:	42021400 	.word	0x42021400
 8002940:	42021800 	.word	0x42021800

08002944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
 8002950:	4613      	mov	r3, r2
 8002952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002954:	787b      	ldrb	r3, [r7, #1]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800295a:	887a      	ldrh	r2, [r7, #2]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002960:	e002      	b.n	8002968 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002962:	887a      	ldrh	r2, [r7, #2]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	460b      	mov	r3, r1
 800297e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	695b      	ldr	r3, [r3, #20]
 8002984:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002986:	887a      	ldrh	r2, [r7, #2]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4013      	ands	r3, r2
 800298c:	041a      	lsls	r2, r3, #16
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	43d9      	mvns	r1, r3
 8002992:	887b      	ldrh	r3, [r7, #2]
 8002994:	400b      	ands	r3, r1
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	619a      	str	r2, [r3, #24]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80029b2:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80029be:	4a0c      	ldr	r2, [pc, #48]	; (80029f0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f814 	bl	80029f4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80029cc:	4b08      	ldr	r3, [pc, #32]	; (80029f0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	88fb      	ldrh	r3, [r7, #6]
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d006      	beq.n	80029e6 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80029d8:	4a05      	ldr	r2, [pc, #20]	; (80029f0 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80029da:	88fb      	ldrh	r3, [r7, #6]
 80029dc:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80029de:	88fb      	ldrh	r3, [r7, #6]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f000 f812 	bl	8002a0a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	4002f400 	.word	0x4002f400

080029f4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	4603      	mov	r3, r0
 80029fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	4603      	mov	r3, r0
 8002a12:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	; (8002a5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
 8002a3c:	e007      	b.n	8002a4e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002a3e:	4b07      	ldr	r3, [pc, #28]	; (8002a5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 0204 	bic.w	r2, r3, #4
 8002a46:	4905      	ldr	r1, [pc, #20]	; (8002a5c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40030400 	.word	0x40030400

08002a60 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_ICACHE_Enable+0x1c>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <HAL_ICACHE_Enable+0x1c>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	40030400 	.word	0x40030400

08002a80 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e0c0      	b.n	8002c14 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d106      	bne.n	8002aac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7fe fb28 	bl	80010fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2203      	movs	r2, #3
 8002ab0:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 fc63 	bl	8006384 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	e03e      	b.n	8002b42 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ac4:	7bfa      	ldrb	r2, [r7, #15]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	00db      	lsls	r3, r3, #3
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3311      	adds	r3, #17
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3310      	adds	r3, #16
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aec:	7bfa      	ldrb	r2, [r7, #15]
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4413      	add	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	440b      	add	r3, r1
 8002afa:	3313      	adds	r3, #19
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b00:	7bfa      	ldrb	r2, [r7, #15]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	440b      	add	r3, r1
 8002b0e:	3320      	adds	r3, #32
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00db      	lsls	r3, r3, #3
 8002b20:	440b      	add	r3, r1
 8002b22:	3324      	adds	r3, #36	; 0x24
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	440b      	add	r3, r1
 8002b38:	2200      	movs	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b3c:	7bfb      	ldrb	r3, [r7, #15]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	791b      	ldrb	r3, [r3, #4]
 8002b46:	7bfa      	ldrb	r2, [r7, #15]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d3bb      	bcc.n	8002ac4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]
 8002b50:	e044      	b.n	8002bdc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	4413      	add	r3, r2
 8002b5c:	00db      	lsls	r3, r3, #3
 8002b5e:	440b      	add	r3, r1
 8002b60:	f203 1351 	addw	r3, r3, #337	; 0x151
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	440b      	add	r3, r1
 8002b76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8002b7a:	7bfa      	ldrb	r2, [r7, #15]
 8002b7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	f203 1353 	addw	r3, r3, #339	; 0x153
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b94:	7bfa      	ldrb	r2, [r7, #15]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002baa:	7bfa      	ldrb	r2, [r7, #15]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	440b      	add	r3, r1
 8002bb8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002bc0:	7bfa      	ldrb	r2, [r7, #15]
 8002bc2:	6879      	ldr	r1, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	440b      	add	r3, r1
 8002bce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	791b      	ldrb	r3, [r3, #4]
 8002be0:	7bfa      	ldrb	r2, [r7, #15]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d3b5      	bcc.n	8002b52 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	3304      	adds	r3, #4
 8002bee:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002bf2:	f003 fbe2 	bl	80063ba <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	7a9b      	ldrb	r3, [r3, #10]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d102      	bne.n	8002c12 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 f805 	bl	8002c1c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002c12:	2300      	movs	r3, #0
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	f043 0302 	orr.w	r3, r3, #2
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c74:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a04      	ldr	r2, [pc, #16]	; (8002c8c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7e:	6013      	str	r3, [r2, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40007000 	.word	0x40007000

08002c90 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002c94:	4b04      	ldr	r3, [pc, #16]	; (8002ca8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40007000 	.word	0x40007000

08002cac <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002cb4:	4b27      	ldr	r3, [pc, #156]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cbc:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002cbe:	f000 f861 	bl	8002d84 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc8:	d101      	bne.n	8002cce <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e03e      	b.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002cce:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cda:	d101      	bne.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e035      	b.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d101      	bne.n	8002cec <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e02f      	b.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002cf4:	4917      	ldr	r1, [pc, #92]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002cfc:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	4a16      	ldr	r2, [pc, #88]	; (8002d5c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	09db      	lsrs	r3, r3, #7
 8002d0a:	2232      	movs	r2, #50	; 0x32
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	08db      	lsrs	r3, r3, #3
 8002d18:	3301      	adds	r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d1c:	e002      	b.n	8002d24 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3b01      	subs	r3, #1
 8002d22:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d30:	d102      	bne.n	8002d38 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f2      	bne.n	8002d1e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d38:	4b06      	ldr	r3, [pc, #24]	; (8002d54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d44:	d101      	bne.n	8002d4a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e000      	b.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40007000 	.word	0x40007000
 8002d58:	20000000 	.word	0x20000000
 8002d5c:	0a7c5ac5 	.word	0x0a7c5ac5
 8002d60:	cccccccd 	.word	0xcccccccd

08002d64 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002d68:	4b05      	ldr	r3, [pc, #20]	; (8002d80 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4a04      	ldr	r2, [pc, #16]	; (8002d80 <HAL_PWREx_EnableVddIO2+0x1c>)
 8002d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d72:	6053      	str	r3, [r2, #4]
}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40007000 	.word	0x40007000

08002d84 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002d8a:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002d9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d9e:	607b      	str	r3, [r7, #4]
 8002da0:	e00a      	b.n	8002db8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d103      	bne.n	8002db4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002dac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002db0:	607b      	str	r3, [r7, #4]
 8002db2:	e001      	b.n	8002db8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002db4:	2300      	movs	r3, #0
 8002db6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002db8:	687b      	ldr	r3, [r7, #4]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40007000 	.word	0x40007000

08002dcc <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	f000 bcc2 	b.w	8003764 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002de0:	4b99      	ldr	r3, [pc, #612]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 030c 	and.w	r3, r3, #12
 8002de8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dea:	4b97      	ldr	r3, [pc, #604]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f000 80e9 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d006      	beq.n	8002e16 <HAL_RCC_OscConfig+0x4a>
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	2b0c      	cmp	r3, #12
 8002e0c:	f040 8083 	bne.w	8002f16 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d17f      	bne.n	8002f16 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e16:	4b8c      	ldr	r3, [pc, #560]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d006      	beq.n	8002e30 <HAL_RCC_OscConfig+0x64>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d102      	bne.n	8002e30 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f000 bc9a 	b.w	8003764 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e34:	4b84      	ldr	r3, [pc, #528]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d004      	beq.n	8002e4a <HAL_RCC_OscConfig+0x7e>
 8002e40:	4b81      	ldr	r3, [pc, #516]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e48:	e005      	b.n	8002e56 <HAL_RCC_OscConfig+0x8a>
 8002e4a:	4b7f      	ldr	r3, [pc, #508]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d224      	bcs.n	8002ea4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fe9c 	bl	8003b9c <RCC_SetFlashLatencyFromMSIRange>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f000 bc7a 	b.w	8003764 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e70:	4b75      	ldr	r3, [pc, #468]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a74      	ldr	r2, [pc, #464]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e76:	f043 0308 	orr.w	r3, r3, #8
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	4b72      	ldr	r3, [pc, #456]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e88:	496f      	ldr	r1, [pc, #444]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e8e:	4b6e      	ldr	r3, [pc, #440]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	496a      	ldr	r1, [pc, #424]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	604b      	str	r3, [r1, #4]
 8002ea2:	e026      	b.n	8002ef2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ea4:	4b68      	ldr	r3, [pc, #416]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a67      	ldr	r2, [pc, #412]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002eaa:	f043 0308 	orr.w	r3, r3, #8
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	4b65      	ldr	r3, [pc, #404]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	4962      	ldr	r1, [pc, #392]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ec2:	4b61      	ldr	r3, [pc, #388]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	021b      	lsls	r3, r3, #8
 8002ed0:	495d      	ldr	r1, [pc, #372]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fe5b 	bl	8003b9c <RCC_SetFlashLatencyFromMSIRange>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f000 bc39 	b.w	8003764 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002ef2:	f000 fe17 	bl	8003b24 <HAL_RCC_GetHCLKFreq>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	4a54      	ldr	r2, [pc, #336]	; (800304c <HAL_RCC_OscConfig+0x280>)
 8002efa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002efc:	4b54      	ldr	r3, [pc, #336]	; (8003050 <HAL_RCC_OscConfig+0x284>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fe fa93 	bl	800142c <HAL_InitTick>
 8002f06:	4603      	mov	r3, r0
 8002f08:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d060      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	f000 bc27 	b.w	8003764 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d039      	beq.n	8002f92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002f1e:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a49      	ldr	r2, [pc, #292]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f2a:	f7fe facf 	bl	80014cc <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f30:	e00f      	b.n	8002f52 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002f32:	f7fe facb 	bl	80014cc <HAL_GetTick>
 8002f36:	4602      	mov	r2, r0
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d908      	bls.n	8002f52 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f40:	4b41      	ldr	r3, [pc, #260]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d102      	bne.n	8002f52 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	f000 bc09 	b.w	8003764 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f52:	4b3d      	ldr	r3, [pc, #244]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0e9      	beq.n	8002f32 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f5e:	4b3a      	ldr	r3, [pc, #232]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a39      	ldr	r2, [pc, #228]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f64:	f043 0308 	orr.w	r3, r3, #8
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	4b37      	ldr	r3, [pc, #220]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	4934      	ldr	r1, [pc, #208]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f7c:	4b32      	ldr	r3, [pc, #200]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	021b      	lsls	r3, r3, #8
 8002f8a:	492f      	ldr	r1, [pc, #188]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	604b      	str	r3, [r1, #4]
 8002f90:	e020      	b.n	8002fd4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002f92:	4b2d      	ldr	r3, [pc, #180]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a2c      	ldr	r2, [pc, #176]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fa95 	bl	80014cc <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fa4:	e00e      	b.n	8002fc4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fa6:	f7fe fa91 	bl	80014cc <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d907      	bls.n	8002fc4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fb4:	4b24      	ldr	r3, [pc, #144]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e3cf      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002fc4:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0302 	and.w	r3, r3, #2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1ea      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x1da>
 8002fd0:	e000      	b.n	8002fd4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fd2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d07e      	beq.n	80030de <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d005      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x226>
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	2b0c      	cmp	r3, #12
 8002fea:	d10e      	bne.n	800300a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d10b      	bne.n	800300a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ff2:	4b15      	ldr	r3, [pc, #84]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d06e      	beq.n	80030dc <HAL_RCC_OscConfig+0x310>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d16a      	bne.n	80030dc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e3ac      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003012:	d106      	bne.n	8003022 <HAL_RCC_OscConfig+0x256>
 8003014:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0b      	ldr	r2, [pc, #44]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 800301a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301e:	6013      	str	r3, [r2, #0]
 8003020:	e024      	b.n	800306c <HAL_RCC_OscConfig+0x2a0>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800302a:	d113      	bne.n	8003054 <HAL_RCC_OscConfig+0x288>
 800302c:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a05      	ldr	r2, [pc, #20]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 8003032:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003036:	6013      	str	r3, [r2, #0]
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a02      	ldr	r2, [pc, #8]	; (8003048 <HAL_RCC_OscConfig+0x27c>)
 800303e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	e012      	b.n	800306c <HAL_RCC_OscConfig+0x2a0>
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	20000000 	.word	0x20000000
 8003050:	20000004 	.word	0x20000004
 8003054:	4b8b      	ldr	r3, [pc, #556]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a8a      	ldr	r2, [pc, #552]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800305a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	4b88      	ldr	r3, [pc, #544]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a87      	ldr	r2, [pc, #540]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800306a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d019      	beq.n	80030a8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe fa2a 	bl	80014cc <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800307a:	e00e      	b.n	800309a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800307c:	f7fe fa26 	bl	80014cc <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d907      	bls.n	800309a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800308a:	4b7e      	ldr	r3, [pc, #504]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e364      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800309a:	4b7a      	ldr	r3, [pc, #488]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0ea      	beq.n	800307c <HAL_RCC_OscConfig+0x2b0>
 80030a6:	e01a      	b.n	80030de <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a8:	f7fe fa10 	bl	80014cc <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ae:	e00e      	b.n	80030ce <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030b0:	f7fe fa0c 	bl	80014cc <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d907      	bls.n	80030ce <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030be:	4b71      	ldr	r3, [pc, #452]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e34a      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030ce:	4b6d      	ldr	r3, [pc, #436]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1ea      	bne.n	80030b0 <HAL_RCC_OscConfig+0x2e4>
 80030da:	e000      	b.n	80030de <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d06c      	beq.n	80031c4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b04      	cmp	r3, #4
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_OscConfig+0x330>
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2b0c      	cmp	r3, #12
 80030f4:	d119      	bne.n	800312a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d116      	bne.n	800312a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030fc:	4b61      	ldr	r3, [pc, #388]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_OscConfig+0x348>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d101      	bne.n	8003114 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e327      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003114:	4b5b      	ldr	r3, [pc, #364]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	061b      	lsls	r3, r3, #24
 8003122:	4958      	ldr	r1, [pc, #352]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003128:	e04c      	b.n	80031c4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d029      	beq.n	8003186 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003132:	4b54      	ldr	r3, [pc, #336]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a53      	ldr	r2, [pc, #332]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800313c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313e:	f7fe f9c5 	bl	80014cc <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003144:	e00e      	b.n	8003164 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003146:	f7fe f9c1 	bl	80014cc <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d907      	bls.n	8003164 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003154:	4b4b      	ldr	r3, [pc, #300]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315c:	2b00      	cmp	r3, #0
 800315e:	d101      	bne.n	8003164 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e2ff      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003164:	4b47      	ldr	r3, [pc, #284]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0ea      	beq.n	8003146 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003170:	4b44      	ldr	r3, [pc, #272]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	061b      	lsls	r3, r3, #24
 800317e:	4941      	ldr	r1, [pc, #260]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003180:	4313      	orrs	r3, r2
 8003182:	604b      	str	r3, [r1, #4]
 8003184:	e01e      	b.n	80031c4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003186:	4b3f      	ldr	r3, [pc, #252]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a3e      	ldr	r2, [pc, #248]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800318c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003192:	f7fe f99b 	bl	80014cc <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003198:	e00e      	b.n	80031b8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319a:	f7fe f997 	bl	80014cc <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d907      	bls.n	80031b8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031a8:	4b36      	ldr	r3, [pc, #216]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e2d5      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b8:	4b32      	ldr	r3, [pc, #200]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d1ea      	bne.n	800319a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d062      	beq.n	8003296 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d038      	beq.n	800324a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d108      	bne.n	80031f2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80031e0:	4b28      	ldr	r3, [pc, #160]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80031e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e6:	4a27      	ldr	r2, [pc, #156]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80031e8:	f023 0310 	bic.w	r3, r3, #16
 80031ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80031f0:	e007      	b.n	8003202 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80031f2:	4b24      	ldr	r3, [pc, #144]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80031f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031f8:	4a22      	ldr	r2, [pc, #136]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80031fa:	f043 0310 	orr.w	r3, r3, #16
 80031fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003202:	4b20      	ldr	r3, [pc, #128]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003204:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003208:	4a1e      	ldr	r2, [pc, #120]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003212:	f7fe f95b 	bl	80014cc <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003218:	e00f      	b.n	800323a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800321a:	f7fe f957 	bl	80014cc <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b07      	cmp	r3, #7
 8003226:	d908      	bls.n	800323a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003228:	4b16      	ldr	r3, [pc, #88]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800322a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e294      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800323a:	4b12      	ldr	r3, [pc, #72]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800323c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d0e8      	beq.n	800321a <HAL_RCC_OscConfig+0x44e>
 8003248:	e025      	b.n	8003296 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800324c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003250:	4a0c      	ldr	r2, [pc, #48]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325a:	f7fe f937 	bl	80014cc <HAL_GetTick>
 800325e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003260:	e012      	b.n	8003288 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003262:	f7fe f933 	bl	80014cc <HAL_GetTick>
 8003266:	4602      	mov	r2, r0
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b07      	cmp	r3, #7
 800326e:	d90b      	bls.n	8003288 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003272:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d004      	beq.n	8003288 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e270      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
 8003282:	bf00      	nop
 8003284:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003288:	4ba8      	ldr	r3, [pc, #672]	; (800352c <HAL_RCC_OscConfig+0x760>)
 800328a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e5      	bne.n	8003262 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 812d 	beq.w	80034fe <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a4:	2300      	movs	r3, #0
 80032a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80032a8:	4ba0      	ldr	r3, [pc, #640]	; (800352c <HAL_RCC_OscConfig+0x760>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10d      	bne.n	80032d0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b4:	4b9d      	ldr	r3, [pc, #628]	; (800352c <HAL_RCC_OscConfig+0x760>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	4a9c      	ldr	r2, [pc, #624]	; (800352c <HAL_RCC_OscConfig+0x760>)
 80032ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032be:	6593      	str	r3, [r2, #88]	; 0x58
 80032c0:	4b9a      	ldr	r3, [pc, #616]	; (800352c <HAL_RCC_OscConfig+0x760>)
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032cc:	2301      	movs	r3, #1
 80032ce:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032d0:	4b97      	ldr	r3, [pc, #604]	; (8003530 <HAL_RCC_OscConfig+0x764>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d11e      	bne.n	800331a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032dc:	4b94      	ldr	r3, [pc, #592]	; (8003530 <HAL_RCC_OscConfig+0x764>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a93      	ldr	r2, [pc, #588]	; (8003530 <HAL_RCC_OscConfig+0x764>)
 80032e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e8:	f7fe f8f0 	bl	80014cc <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ee:	e00e      	b.n	800330e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f0:	f7fe f8ec 	bl	80014cc <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d907      	bls.n	800330e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032fe:	4b8c      	ldr	r3, [pc, #560]	; (8003530 <HAL_RCC_OscConfig+0x764>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e22a      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800330e:	4b88      	ldr	r3, [pc, #544]	; (8003530 <HAL_RCC_OscConfig+0x764>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0ea      	beq.n	80032f0 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d01f      	beq.n	8003366 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d010      	beq.n	8003354 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003332:	4b7e      	ldr	r3, [pc, #504]	; (800352c <HAL_RCC_OscConfig+0x760>)
 8003334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003338:	4a7c      	ldr	r2, [pc, #496]	; (800352c <HAL_RCC_OscConfig+0x760>)
 800333a:	f043 0304 	orr.w	r3, r3, #4
 800333e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003342:	4b7a      	ldr	r3, [pc, #488]	; (800352c <HAL_RCC_OscConfig+0x760>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003348:	4a78      	ldr	r2, [pc, #480]	; (800352c <HAL_RCC_OscConfig+0x760>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003352:	e018      	b.n	8003386 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003354:	4b75      	ldr	r3, [pc, #468]	; (800352c <HAL_RCC_OscConfig+0x760>)
 8003356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335a:	4a74      	ldr	r2, [pc, #464]	; (800352c <HAL_RCC_OscConfig+0x760>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003364:	e00f      	b.n	8003386 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003366:	4b71      	ldr	r3, [pc, #452]	; (800352c <HAL_RCC_OscConfig+0x760>)
 8003368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336c:	4a6f      	ldr	r2, [pc, #444]	; (800352c <HAL_RCC_OscConfig+0x760>)
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003376:	4b6d      	ldr	r3, [pc, #436]	; (800352c <HAL_RCC_OscConfig+0x760>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800337c:	4a6b      	ldr	r2, [pc, #428]	; (800352c <HAL_RCC_OscConfig+0x760>)
 800337e:	f023 0304 	bic.w	r3, r3, #4
 8003382:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d068      	beq.n	8003460 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338e:	f7fe f89d 	bl	80014cc <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003394:	e011      	b.n	80033ba <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003396:	f7fe f899 	bl	80014cc <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d908      	bls.n	80033ba <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033a8:	4b60      	ldr	r3, [pc, #384]	; (800352c <HAL_RCC_OscConfig+0x760>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d101      	bne.n	80033ba <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e1d4      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ba:	4b5c      	ldr	r3, [pc, #368]	; (800352c <HAL_RCC_OscConfig+0x760>)
 80033bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d0e6      	beq.n	8003396 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d022      	beq.n	800341a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80033d4:	4b55      	ldr	r3, [pc, #340]	; (800352c <HAL_RCC_OscConfig+0x760>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	4a54      	ldr	r2, [pc, #336]	; (800352c <HAL_RCC_OscConfig+0x760>)
 80033dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80033e4:	e011      	b.n	800340a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e6:	f7fe f871 	bl	80014cc <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d908      	bls.n	800340a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80033f8:	4b4c      	ldr	r3, [pc, #304]	; (800352c <HAL_RCC_OscConfig+0x760>)
 80033fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e1ac      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800340a:	4b48      	ldr	r3, [pc, #288]	; (800352c <HAL_RCC_OscConfig+0x760>)
 800340c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0e6      	beq.n	80033e6 <HAL_RCC_OscConfig+0x61a>
 8003418:	e068      	b.n	80034ec <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800341a:	4b44      	ldr	r3, [pc, #272]	; (800352c <HAL_RCC_OscConfig+0x760>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003420:	4a42      	ldr	r2, [pc, #264]	; (800352c <HAL_RCC_OscConfig+0x760>)
 8003422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800342a:	e011      	b.n	8003450 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800342c:	f7fe f84e 	bl	80014cc <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	f241 3288 	movw	r2, #5000	; 0x1388
 800343a:	4293      	cmp	r3, r2
 800343c:	d908      	bls.n	8003450 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800343e:	4b3b      	ldr	r3, [pc, #236]	; (800352c <HAL_RCC_OscConfig+0x760>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e189      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003450:	4b36      	ldr	r3, [pc, #216]	; (800352c <HAL_RCC_OscConfig+0x760>)
 8003452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1e6      	bne.n	800342c <HAL_RCC_OscConfig+0x660>
 800345e:	e045      	b.n	80034ec <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7fe f834 	bl	80014cc <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003466:	e011      	b.n	800348c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003468:	f7fe f830 	bl	80014cc <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	; 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d908      	bls.n	800348c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800347a:	4b2c      	ldr	r3, [pc, #176]	; (800352c <HAL_RCC_OscConfig+0x760>)
 800347c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e16b      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800348c:	4b27      	ldr	r3, [pc, #156]	; (800352c <HAL_RCC_OscConfig+0x760>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e6      	bne.n	8003468 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800349a:	4b24      	ldr	r3, [pc, #144]	; (800352c <HAL_RCC_OscConfig+0x760>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d021      	beq.n	80034ec <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034a8:	4b20      	ldr	r3, [pc, #128]	; (800352c <HAL_RCC_OscConfig+0x760>)
 80034aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ae:	4a1f      	ldr	r2, [pc, #124]	; (800352c <HAL_RCC_OscConfig+0x760>)
 80034b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034b8:	e011      	b.n	80034de <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ba:	f7fe f807 	bl	80014cc <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d908      	bls.n	80034de <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034cc:	4b17      	ldr	r3, [pc, #92]	; (800352c <HAL_RCC_OscConfig+0x760>)
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e142      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034de:	4b13      	ldr	r3, [pc, #76]	; (800352c <HAL_RCC_OscConfig+0x760>)
 80034e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1e6      	bne.n	80034ba <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034ec:	7ffb      	ldrb	r3, [r7, #31]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d105      	bne.n	80034fe <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034f2:	4b0e      	ldr	r3, [pc, #56]	; (800352c <HAL_RCC_OscConfig+0x760>)
 80034f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f6:	4a0d      	ldr	r2, [pc, #52]	; (800352c <HAL_RCC_OscConfig+0x760>)
 80034f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b00      	cmp	r3, #0
 8003508:	d04f      	beq.n	80035aa <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	2b00      	cmp	r3, #0
 8003510:	d028      	beq.n	8003564 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003512:	4b06      	ldr	r3, [pc, #24]	; (800352c <HAL_RCC_OscConfig+0x760>)
 8003514:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003518:	4a04      	ldr	r2, [pc, #16]	; (800352c <HAL_RCC_OscConfig+0x760>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003522:	f7fd ffd3 	bl	80014cc <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003528:	e014      	b.n	8003554 <HAL_RCC_OscConfig+0x788>
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000
 8003530:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003534:	f7fd ffca 	bl	80014cc <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d908      	bls.n	8003554 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003542:	4b8a      	ldr	r3, [pc, #552]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 8003544:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e107      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003554:	4b85      	ldr	r3, [pc, #532]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 8003556:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0e8      	beq.n	8003534 <HAL_RCC_OscConfig+0x768>
 8003562:	e022      	b.n	80035aa <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003564:	4b81      	ldr	r3, [pc, #516]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 8003566:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800356a:	4a80      	ldr	r2, [pc, #512]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fd ffaa 	bl	80014cc <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800357a:	e00f      	b.n	800359c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800357c:	f7fd ffa6 	bl	80014cc <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d908      	bls.n	800359c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800358a:	4b78      	ldr	r3, [pc, #480]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 800358c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e0e3      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800359c:	4b73      	ldr	r3, [pc, #460]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 800359e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e8      	bne.n	800357c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 80d7 	beq.w	8003762 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035b4:	4b6d      	ldr	r3, [pc, #436]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 030c 	and.w	r3, r3, #12
 80035bc:	2b0c      	cmp	r3, #12
 80035be:	f000 8091 	beq.w	80036e4 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d166      	bne.n	8003698 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ca:	4b68      	ldr	r3, [pc, #416]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a67      	ldr	r2, [pc, #412]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 80035d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d6:	f7fd ff79 	bl	80014cc <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035dc:	e00e      	b.n	80035fc <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035de:	f7fd ff75 	bl	80014cc <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d907      	bls.n	80035fc <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ec:	4b5f      	ldr	r3, [pc, #380]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e0b3      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035fc:	4b5b      	ldr	r3, [pc, #364]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1ea      	bne.n	80035de <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003608:	4b58      	ldr	r3, [pc, #352]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 800360a:	68da      	ldr	r2, [r3, #12]
 800360c:	4b58      	ldr	r3, [pc, #352]	; (8003770 <HAL_RCC_OscConfig+0x9a4>)
 800360e:	4013      	ands	r3, r2
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003618:	3a01      	subs	r2, #1
 800361a:	0112      	lsls	r2, r2, #4
 800361c:	4311      	orrs	r1, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003622:	0212      	lsls	r2, r2, #8
 8003624:	4311      	orrs	r1, r2
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800362a:	0852      	lsrs	r2, r2, #1
 800362c:	3a01      	subs	r2, #1
 800362e:	0552      	lsls	r2, r2, #21
 8003630:	4311      	orrs	r1, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003636:	0852      	lsrs	r2, r2, #1
 8003638:	3a01      	subs	r2, #1
 800363a:	0652      	lsls	r2, r2, #25
 800363c:	4311      	orrs	r1, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003642:	06d2      	lsls	r2, r2, #27
 8003644:	430a      	orrs	r2, r1
 8003646:	4949      	ldr	r1, [pc, #292]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 8003648:	4313      	orrs	r3, r2
 800364a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800364c:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a46      	ldr	r2, [pc, #280]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 8003652:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003656:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003658:	4b44      	ldr	r3, [pc, #272]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a43      	ldr	r2, [pc, #268]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 800365e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003662:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fd ff32 	bl	80014cc <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800366a:	e00e      	b.n	800368a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800366c:	f7fd ff2e 	bl	80014cc <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d907      	bls.n	800368a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800367a:	4b3c      	ldr	r3, [pc, #240]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d101      	bne.n	800368a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e06c      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800368a:	4b38      	ldr	r3, [pc, #224]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0ea      	beq.n	800366c <HAL_RCC_OscConfig+0x8a0>
 8003696:	e064      	b.n	8003762 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003698:	4b34      	ldr	r3, [pc, #208]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a33      	ldr	r2, [pc, #204]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 800369e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fd ff12 	bl	80014cc <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036aa:	e00e      	b.n	80036ca <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fd ff0e 	bl	80014cc <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d907      	bls.n	80036ca <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ba:	4b2c      	ldr	r3, [pc, #176]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e04c      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ca:	4b28      	ldr	r3, [pc, #160]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1ea      	bne.n	80036ac <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036d6:	4b25      	ldr	r3, [pc, #148]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	4924      	ldr	r1, [pc, #144]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 80036dc:	4b25      	ldr	r3, [pc, #148]	; (8003774 <HAL_RCC_OscConfig+0x9a8>)
 80036de:	4013      	ands	r3, r2
 80036e0:	60cb      	str	r3, [r1, #12]
 80036e2:	e03e      	b.n	8003762 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e039      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80036f0:	4b1e      	ldr	r3, [pc, #120]	; (800376c <HAL_RCC_OscConfig+0x9a0>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f003 0203 	and.w	r2, r3, #3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003700:	429a      	cmp	r2, r3
 8003702:	d12c      	bne.n	800375e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370e:	3b01      	subs	r3, #1
 8003710:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d123      	bne.n	800375e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003722:	429a      	cmp	r2, r3
 8003724:	d11b      	bne.n	800375e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003730:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003732:	429a      	cmp	r2, r3
 8003734:	d113      	bne.n	800375e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	085b      	lsrs	r3, r3, #1
 8003742:	3b01      	subs	r3, #1
 8003744:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d109      	bne.n	800375e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003754:	085b      	lsrs	r3, r3, #1
 8003756:	3b01      	subs	r3, #1
 8003758:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d001      	beq.n	8003762 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e000      	b.n	8003764 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3720      	adds	r7, #32
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40021000 	.word	0x40021000
 8003770:	019f800c 	.word	0x019f800c
 8003774:	feeefffc 	.word	0xfeeefffc

08003778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e11c      	b.n	80039ca <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003790:	4b90      	ldr	r3, [pc, #576]	; (80039d4 <HAL_RCC_ClockConfig+0x25c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d910      	bls.n	80037c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b8d      	ldr	r3, [pc, #564]	; (80039d4 <HAL_RCC_ClockConfig+0x25c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 020f 	bic.w	r2, r3, #15
 80037a6:	498b      	ldr	r1, [pc, #556]	; (80039d4 <HAL_RCC_ClockConfig+0x25c>)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ae:	4b89      	ldr	r3, [pc, #548]	; (80039d4 <HAL_RCC_ClockConfig+0x25c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d001      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e104      	b.n	80039ca <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d010      	beq.n	80037ee <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	4b81      	ldr	r3, [pc, #516]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037d8:	429a      	cmp	r2, r3
 80037da:	d908      	bls.n	80037ee <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037dc:	4b7e      	ldr	r3, [pc, #504]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	497b      	ldr	r1, [pc, #492]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 8085 	beq.w	8003906 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	2b03      	cmp	r3, #3
 8003802:	d11f      	bne.n	8003844 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003804:	4b74      	ldr	r3, [pc, #464]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d101      	bne.n	8003814 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e0da      	b.n	80039ca <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003814:	f000 fa26 	bl	8003c64 <RCC_GetSysClockFreqFromPLLSource>
 8003818:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4a6f      	ldr	r2, [pc, #444]	; (80039dc <HAL_RCC_ClockConfig+0x264>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d947      	bls.n	80038b2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003822:	4b6d      	ldr	r3, [pc, #436]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d141      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800382e:	4b6a      	ldr	r3, [pc, #424]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003836:	4a68      	ldr	r2, [pc, #416]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 8003838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800383c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800383e:	2380      	movs	r3, #128	; 0x80
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e036      	b.n	80038b2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b02      	cmp	r3, #2
 800384a:	d107      	bne.n	800385c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800384c:	4b62      	ldr	r3, [pc, #392]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d115      	bne.n	8003884 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0b6      	b.n	80039ca <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d107      	bne.n	8003874 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003864:	4b5c      	ldr	r3, [pc, #368]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d109      	bne.n	8003884 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0aa      	b.n	80039ca <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003874:	4b58      	ldr	r3, [pc, #352]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e0a2      	b.n	80039ca <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003884:	f000 f8b0 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8003888:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	4a53      	ldr	r2, [pc, #332]	; (80039dc <HAL_RCC_ClockConfig+0x264>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d90f      	bls.n	80038b2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003892:	4b51      	ldr	r3, [pc, #324]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800389e:	4b4e      	ldr	r3, [pc, #312]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038a6:	4a4c      	ldr	r2, [pc, #304]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 80038a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80038ae:	2380      	movs	r3, #128	; 0x80
 80038b0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4b49      	ldr	r3, [pc, #292]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4946      	ldr	r1, [pc, #280]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c4:	f7fd fe02 	bl	80014cc <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e013      	b.n	80038f4 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fd fdfe 	bl	80014cc <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d90a      	bls.n	80038f4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038de:	4b3e      	ldr	r3, [pc, #248]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 020c 	and.w	r2, r3, #12
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e06a      	b.n	80039ca <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038f4:	4b38      	ldr	r3, [pc, #224]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 020c 	and.w	r2, r3, #12
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	429a      	cmp	r2, r3
 8003904:	d1e2      	bne.n	80038cc <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2b80      	cmp	r3, #128	; 0x80
 800390a:	d105      	bne.n	8003918 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800390c:	4b32      	ldr	r3, [pc, #200]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	4a31      	ldr	r2, [pc, #196]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 8003912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003916:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d010      	beq.n	8003946 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689a      	ldr	r2, [r3, #8]
 8003928:	4b2b      	ldr	r3, [pc, #172]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003930:	429a      	cmp	r2, r3
 8003932:	d208      	bcs.n	8003946 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003934:	4b28      	ldr	r3, [pc, #160]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	4925      	ldr	r1, [pc, #148]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 8003942:	4313      	orrs	r3, r2
 8003944:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003946:	4b23      	ldr	r3, [pc, #140]	; (80039d4 <HAL_RCC_ClockConfig+0x25c>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d210      	bcs.n	8003976 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003954:	4b1f      	ldr	r3, [pc, #124]	; (80039d4 <HAL_RCC_ClockConfig+0x25c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 020f 	bic.w	r2, r3, #15
 800395c:	491d      	ldr	r1, [pc, #116]	; (80039d4 <HAL_RCC_ClockConfig+0x25c>)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	4313      	orrs	r3, r2
 8003962:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_RCC_ClockConfig+0x25c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d001      	beq.n	8003976 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e029      	b.n	80039ca <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	d008      	beq.n	8003994 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003982:	4b15      	ldr	r3, [pc, #84]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	4912      	ldr	r1, [pc, #72]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 8003990:	4313      	orrs	r3, r2
 8003992:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	d009      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039a0:	4b0d      	ldr	r3, [pc, #52]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	00db      	lsls	r3, r3, #3
 80039ae:	490a      	ldr	r1, [pc, #40]	; (80039d8 <HAL_RCC_ClockConfig+0x260>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80039b4:	f000 f8b6 	bl	8003b24 <HAL_RCC_GetHCLKFreq>
 80039b8:	4603      	mov	r3, r0
 80039ba:	4a09      	ldr	r2, [pc, #36]	; (80039e0 <HAL_RCC_ClockConfig+0x268>)
 80039bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <HAL_RCC_ClockConfig+0x26c>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fd fd32 	bl	800142c <HAL_InitTick>
 80039c8:	4603      	mov	r3, r0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3718      	adds	r7, #24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	40022000 	.word	0x40022000
 80039d8:	40021000 	.word	0x40021000
 80039dc:	04c4b400 	.word	0x04c4b400
 80039e0:	20000000 	.word	0x20000000
 80039e4:	20000004 	.word	0x20000004

080039e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b089      	sub	sp, #36	; 0x24
 80039ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
 80039f2:	2300      	movs	r3, #0
 80039f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039f6:	4b47      	ldr	r3, [pc, #284]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x12c>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a00:	4b44      	ldr	r3, [pc, #272]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	f003 0303 	and.w	r3, r3, #3
 8003a08:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0x34>
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	2b0c      	cmp	r3, #12
 8003a14:	d121      	bne.n	8003a5a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d11e      	bne.n	8003a5a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a1c:	4b3d      	ldr	r3, [pc, #244]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a28:	4b3a      	ldr	r3, [pc, #232]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	e005      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a38:	4b36      	ldr	r3, [pc, #216]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	091b      	lsrs	r3, r3, #4
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003a44:	4a34      	ldr	r2, [pc, #208]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x130>)
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d10d      	bne.n	8003a70 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a58:	e00a      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b04      	cmp	r3, #4
 8003a5e:	d102      	bne.n	8003a66 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a60:	4b2e      	ldr	r3, [pc, #184]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x134>)
 8003a62:	61bb      	str	r3, [r7, #24]
 8003a64:	e004      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d101      	bne.n	8003a70 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a6c:	4b2c      	ldr	r3, [pc, #176]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a6e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	2b0c      	cmp	r3, #12
 8003a74:	d146      	bne.n	8003b04 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003a76:	4b27      	ldr	r3, [pc, #156]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a80:	4b24      	ldr	r3, [pc, #144]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d003      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0xb4>
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d00d      	beq.n	8003ab6 <HAL_RCC_GetSysClockFreq+0xce>
 8003a9a:	e019      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a9c:	4a1f      	ldr	r2, [pc, #124]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x134>)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	4a1b      	ldr	r2, [pc, #108]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003aa6:	68d2      	ldr	r2, [r2, #12]
 8003aa8:	0a12      	lsrs	r2, r2, #8
 8003aaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	617b      	str	r3, [r7, #20]
        break;
 8003ab4:	e019      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ab6:	4a1a      	ldr	r2, [pc, #104]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003abe:	4a15      	ldr	r2, [pc, #84]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003ac0:	68d2      	ldr	r2, [r2, #12]
 8003ac2:	0a12      	lsrs	r2, r2, #8
 8003ac4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ac8:	fb02 f303 	mul.w	r3, r2, r3
 8003acc:	617b      	str	r3, [r7, #20]
        break;
 8003ace:	e00c      	b.n	8003aea <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	4a0e      	ldr	r2, [pc, #56]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003ada:	68d2      	ldr	r2, [r2, #12]
 8003adc:	0a12      	lsrs	r2, r2, #8
 8003ade:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ae2:	fb02 f303 	mul.w	r3, r2, r3
 8003ae6:	617b      	str	r3, [r7, #20]
        break;
 8003ae8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	0e5b      	lsrs	r3, r3, #25
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	3301      	adds	r3, #1
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b04:	69bb      	ldr	r3, [r7, #24]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3724      	adds	r7, #36	; 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40021000 	.word	0x40021000
 8003b18:	08006480 	.word	0x08006480
 8003b1c:	00f42400 	.word	0x00f42400
 8003b20:	007a1200 	.word	0x007a1200

08003b24 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003b28:	f7ff ff5e 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_GetHCLKFreq+0x20>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	091b      	lsrs	r3, r3, #4
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	4903      	ldr	r1, [pc, #12]	; (8003b48 <HAL_RCC_GetHCLKFreq+0x24>)
 8003b3a:	5ccb      	ldrb	r3, [r1, r3]
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40021000 	.word	0x40021000
 8003b48:	08006468 	.word	0x08006468

08003b4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b50:	f7ff ffe8 	bl	8003b24 <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	0a1b      	lsrs	r3, r3, #8
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4903      	ldr	r1, [pc, #12]	; (8003b70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	08006478 	.word	0x08006478

08003b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b78:	f7ff ffd4 	bl	8003b24 <HAL_RCC_GetHCLKFreq>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	0adb      	lsrs	r3, r3, #11
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	4903      	ldr	r1, [pc, #12]	; (8003b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b8a:	5ccb      	ldrb	r3, [r1, r3]
 8003b8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021000 	.word	0x40021000
 8003b98:	08006478 	.word	0x08006478

08003b9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ba8:	4b2c      	ldr	r3, [pc, #176]	; (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d003      	beq.n	8003bbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bb4:	f7ff f86c 	bl	8002c90 <HAL_PWREx_GetVoltageRange>
 8003bb8:	6138      	str	r0, [r7, #16]
 8003bba:	e014      	b.n	8003be6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bbc:	4b27      	ldr	r3, [pc, #156]	; (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc0:	4a26      	ldr	r2, [pc, #152]	; (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc6:	6593      	str	r3, [r2, #88]	; 0x58
 8003bc8:	4b24      	ldr	r3, [pc, #144]	; (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bd4:	f7ff f85c 	bl	8002c90 <HAL_PWREx_GetVoltageRange>
 8003bd8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bda:	4b20      	ldr	r3, [pc, #128]	; (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bde:	4a1f      	ldr	r2, [pc, #124]	; (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003be0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d003      	beq.n	8003bf4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf2:	d10b      	bne.n	8003c0c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b80      	cmp	r3, #128	; 0x80
 8003bf8:	d919      	bls.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2ba0      	cmp	r3, #160	; 0xa0
 8003bfe:	d902      	bls.n	8003c06 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c00:	2302      	movs	r3, #2
 8003c02:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003c04:	e013      	b.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c06:	2301      	movs	r3, #1
 8003c08:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003c0a:	e010      	b.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b80      	cmp	r3, #128	; 0x80
 8003c10:	d902      	bls.n	8003c18 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c12:	2303      	movs	r3, #3
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e00a      	b.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b80      	cmp	r3, #128	; 0x80
 8003c1c:	d102      	bne.n	8003c24 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c1e:	2302      	movs	r3, #2
 8003c20:	617b      	str	r3, [r7, #20]
 8003c22:	e004      	b.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b70      	cmp	r3, #112	; 0x70
 8003c28:	d101      	bne.n	8003c2e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c2e:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 020f 	bic.w	r2, r3, #15
 8003c36:	490a      	ldr	r1, [pc, #40]	; (8003c60 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003c3e:	4b08      	ldr	r3, [pc, #32]	; (8003c60 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 030f 	and.w	r3, r3, #15
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d001      	beq.n	8003c50 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40022000 	.word	0x40022000

08003c64 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c6a:	4b31      	ldr	r3, [pc, #196]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c74:	4b2e      	ldr	r3, [pc, #184]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	3301      	adds	r3, #1
 8003c80:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d015      	beq.n	8003cb4 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2b03      	cmp	r3, #3
 8003c8c:	d839      	bhi.n	8003d02 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d01c      	beq.n	8003cce <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d133      	bne.n	8003d02 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c9a:	4a26      	ldr	r2, [pc, #152]	; (8003d34 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca2:	4a23      	ldr	r2, [pc, #140]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003ca4:	68d2      	ldr	r2, [r2, #12]
 8003ca6:	0a12      	lsrs	r2, r2, #8
 8003ca8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cac:	fb02 f303 	mul.w	r3, r2, r3
 8003cb0:	613b      	str	r3, [r7, #16]
      break;
 8003cb2:	e029      	b.n	8003d08 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cb4:	4a20      	ldr	r2, [pc, #128]	; (8003d38 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003cbe:	68d2      	ldr	r2, [r2, #12]
 8003cc0:	0a12      	lsrs	r2, r2, #8
 8003cc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	613b      	str	r3, [r7, #16]
      break;
 8003ccc:	e01c      	b.n	8003d08 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cce:	4b18      	ldr	r3, [pc, #96]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d107      	bne.n	8003cea <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cda:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003cdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ce0:	0a1b      	lsrs	r3, r3, #8
 8003ce2:	f003 030f 	and.w	r3, r3, #15
 8003ce6:	617b      	str	r3, [r7, #20]
 8003ce8:	e005      	b.n	8003cf6 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cea:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003cf6:	4a11      	ldr	r2, [pc, #68]	; (8003d3c <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cfe:	613b      	str	r3, [r7, #16]
        break;
 8003d00:	e002      	b.n	8003d08 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003d02:	2300      	movs	r3, #0
 8003d04:	613b      	str	r3, [r7, #16]
      break;
 8003d06:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003d08:	4b09      	ldr	r3, [pc, #36]	; (8003d30 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	0e5b      	lsrs	r3, r3, #25
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	3301      	adds	r3, #1
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003d22:	683b      	ldr	r3, [r7, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr
 8003d30:	40021000 	.word	0x40021000
 8003d34:	00f42400 	.word	0x00f42400
 8003d38:	007a1200 	.word	0x007a1200
 8003d3c:	08006480 	.word	0x08006480

08003d40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d48:	2300      	movs	r3, #0
 8003d4a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d040      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d60:	2b80      	cmp	r3, #128	; 0x80
 8003d62:	d02a      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d64:	2b80      	cmp	r3, #128	; 0x80
 8003d66:	d825      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d68:	2b60      	cmp	r3, #96	; 0x60
 8003d6a:	d026      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d6c:	2b60      	cmp	r3, #96	; 0x60
 8003d6e:	d821      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d006      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003d74:	2b40      	cmp	r3, #64	; 0x40
 8003d76:	d81d      	bhi.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d009      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003d7c:	2b20      	cmp	r3, #32
 8003d7e:	d010      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003d80:	e018      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d82:	4b8f      	ldr	r3, [pc, #572]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	4a8e      	ldr	r2, [pc, #568]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003d8e:	e015      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	3304      	adds	r3, #4
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fb56 	bl	8004448 <RCCEx_PLLSAI1_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003da0:	e00c      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3320      	adds	r3, #32
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fc33 	bl	8004614 <RCCEx_PLLSAI2_Config>
 8003dae:	4603      	mov	r3, r0
 8003db0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003db2:	e003      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	77fb      	strb	r3, [r7, #31]
        break;
 8003db8:	e000      	b.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dbc:	7ffb      	ldrb	r3, [r7, #31]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10b      	bne.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dc2:	4b7f      	ldr	r3, [pc, #508]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dc8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dd0:	497b      	ldr	r1, [pc, #492]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003dd8:	e001      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dda:	7ffb      	ldrb	r3, [r7, #31]
 8003ddc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d047      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df2:	d030      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003df8:	d82a      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dfe:	d02a      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e04:	d824      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e10:	d81e      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1a:	d010      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e1c:	e018      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e1e:	4b68      	ldr	r3, [pc, #416]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	4a67      	ldr	r2, [pc, #412]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e28:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003e2a:	e015      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	2100      	movs	r1, #0
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 fb08 	bl	8004448 <RCCEx_PLLSAI1_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003e3c:	e00c      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3320      	adds	r3, #32
 8003e42:	2100      	movs	r1, #0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f000 fbe5 	bl	8004614 <RCCEx_PLLSAI2_Config>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003e4e:	e003      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	77fb      	strb	r3, [r7, #31]
        break;
 8003e54:	e000      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e58:	7ffb      	ldrb	r3, [r7, #31]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e5e:	4b58      	ldr	r3, [pc, #352]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e64:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6c:	4954      	ldr	r1, [pc, #336]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e74:	e001      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e76:	7ffb      	ldrb	r3, [r7, #31]
 8003e78:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80ab 	beq.w	8003fde <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e8c:	4b4c      	ldr	r3, [pc, #304]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10d      	bne.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e98:	4b49      	ldr	r3, [pc, #292]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9c:	4a48      	ldr	r2, [pc, #288]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003e9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ea4:	4b46      	ldr	r3, [pc, #280]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eb4:	4b43      	ldr	r3, [pc, #268]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a42      	ldr	r2, [pc, #264]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ec0:	f7fd fb04 	bl	80014cc <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ec6:	e00f      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec8:	f7fd fb00 	bl	80014cc <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d908      	bls.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ed6:	4b3b      	ldr	r3, [pc, #236]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d109      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8003ee6:	e006      	b.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ee8:	4b36      	ldr	r3, [pc, #216]	; (8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0e9      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8003ef4:	e000      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8003ef6:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003ef8:	7ffb      	ldrb	r3, [r7, #31]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d164      	bne.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003efe:	4b30      	ldr	r3, [pc, #192]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f08:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01f      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d019      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f1c:	4b28      	ldr	r3, [pc, #160]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f26:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f28:	4b25      	ldr	r3, [pc, #148]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	4a24      	ldr	r2, [pc, #144]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f38:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f3e:	4a20      	ldr	r2, [pc, #128]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f48:	4a1d      	ldr	r2, [pc, #116]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d01f      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7fd fab7 	bl	80014cc <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f60:	e012      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f62:	f7fd fab3 	bl	80014cc <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d909      	bls.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f74:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10a      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8003f86:	e007      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0e5      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8003f96:	e000      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8003f98:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8003f9a:	7ffb      	ldrb	r3, [r7, #31]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10c      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fa0:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb0:	4903      	ldr	r1, [pc, #12]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fb8:	e008      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fba:	7ffb      	ldrb	r3, [r7, #31]
 8003fbc:	77bb      	strb	r3, [r7, #30]
 8003fbe:	e005      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc8:	7ffb      	ldrb	r3, [r7, #31]
 8003fca:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d105      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd2:	4b9c      	ldr	r3, [pc, #624]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd6:	4a9b      	ldr	r2, [pc, #620]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fea:	4b96      	ldr	r3, [pc, #600]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff0:	f023 0203 	bic.w	r2, r3, #3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff8:	4992      	ldr	r1, [pc, #584]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800400c:	4b8d      	ldr	r3, [pc, #564]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f023 020c 	bic.w	r2, r3, #12
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401a:	498a      	ldr	r1, [pc, #552]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800402e:	4b85      	ldr	r3, [pc, #532]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403c:	4981      	ldr	r1, [pc, #516]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004050:	4b7c      	ldr	r3, [pc, #496]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	4979      	ldr	r1, [pc, #484]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004072:	4b74      	ldr	r3, [pc, #464]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004080:	4970      	ldr	r1, [pc, #448]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0320 	and.w	r3, r3, #32
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004094:	4b6b      	ldr	r3, [pc, #428]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a2:	4968      	ldr	r1, [pc, #416]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040b6:	4b63      	ldr	r3, [pc, #396]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c4:	495f      	ldr	r1, [pc, #380]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040d8:	4b5a      	ldr	r3, [pc, #360]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040e6:	4957      	ldr	r1, [pc, #348]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80040fa:	4b52      	ldr	r3, [pc, #328]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004100:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004108:	494e      	ldr	r1, [pc, #312]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d031      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004120:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004124:	d00e      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004126:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800412a:	d814      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800412c:	2b00      	cmp	r3, #0
 800412e:	d015      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004134:	d10f      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004136:	4b43      	ldr	r3, [pc, #268]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	4a42      	ldr	r2, [pc, #264]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800413c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004140:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004142:	e00c      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3304      	adds	r3, #4
 8004148:	2100      	movs	r1, #0
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f97c 	bl	8004448 <RCCEx_PLLSAI1_Config>
 8004150:	4603      	mov	r3, r0
 8004152:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004154:	e003      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	77fb      	strb	r3, [r7, #31]
        break;
 800415a:	e000      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 800415c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800415e:	7ffb      	ldrb	r3, [r7, #31]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10b      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004164:	4b37      	ldr	r3, [pc, #220]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004172:	4934      	ldr	r1, [pc, #208]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800417a:	e001      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417c:	7ffb      	ldrb	r3, [r7, #31]
 800417e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00a      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800418c:	4b2d      	ldr	r3, [pc, #180]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004192:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419a:	492a      	ldr	r1, [pc, #168]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041ae:	4b25      	ldr	r3, [pc, #148]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041bc:	4921      	ldr	r1, [pc, #132]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00a      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80041d0:	4b1c      	ldr	r3, [pc, #112]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	4919      	ldr	r1, [pc, #100]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041f2:	4b14      	ldr	r3, [pc, #80]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80041f8:	f023 0203 	bic.w	r2, r3, #3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004200:	4910      	ldr	r1, [pc, #64]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d02b      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004214:	4b0b      	ldr	r3, [pc, #44]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004222:	4908      	ldr	r1, [pc, #32]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004232:	d109      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	4a02      	ldr	r2, [pc, #8]	; (8004244 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800423a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800423e:	60d3      	str	r3, [r2, #12]
 8004240:	e014      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004250:	d10c      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3304      	adds	r3, #4
 8004256:	2101      	movs	r1, #1
 8004258:	4618      	mov	r0, r3
 800425a:	f000 f8f5 	bl	8004448 <RCCEx_PLLSAI1_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004262:	7ffb      	ldrb	r3, [r7, #31]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004268:	7ffb      	ldrb	r3, [r7, #31]
 800426a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d04a      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800427c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004280:	d108      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004282:	4b70      	ldr	r3, [pc, #448]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004284:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004288:	4a6e      	ldr	r2, [pc, #440]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800428a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800428e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004292:	e012      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004294:	4b6b      	ldr	r3, [pc, #428]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042a2:	4968      	ldr	r1, [pc, #416]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80042aa:	4b66      	ldr	r3, [pc, #408]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042b0:	4a64      	ldr	r2, [pc, #400]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042b6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042c2:	d10d      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3304      	adds	r3, #4
 80042c8:	2101      	movs	r1, #1
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 f8bc 	bl	8004448 <RCCEx_PLLSAI1_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80042d4:	7ffb      	ldrb	r3, [r7, #31]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d019      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80042da:	7ffb      	ldrb	r3, [r7, #31]
 80042dc:	77bb      	strb	r3, [r7, #30]
 80042de:	e016      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042e8:	d106      	bne.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ea:	4b56      	ldr	r3, [pc, #344]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	4a55      	ldr	r2, [pc, #340]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80042f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042f4:	60d3      	str	r3, [r2, #12]
 80042f6:	e00a      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004300:	d105      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004302:	4b50      	ldr	r3, [pc, #320]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	4a4f      	ldr	r2, [pc, #316]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800430c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d028      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800431a:	4b4a      	ldr	r3, [pc, #296]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004328:	4946      	ldr	r1, [pc, #280]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004334:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004338:	d106      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800433a:	4b42      	ldr	r3, [pc, #264]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	4a41      	ldr	r2, [pc, #260]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004344:	60d3      	str	r3, [r2, #12]
 8004346:	e011      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800434c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004350:	d10c      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3304      	adds	r3, #4
 8004356:	2101      	movs	r1, #1
 8004358:	4618      	mov	r0, r3
 800435a:	f000 f875 	bl	8004448 <RCCEx_PLLSAI1_Config>
 800435e:	4603      	mov	r3, r0
 8004360:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004362:	7ffb      	ldrb	r3, [r7, #31]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8004368:	7ffb      	ldrb	r3, [r7, #31]
 800436a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01e      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004378:	4b32      	ldr	r3, [pc, #200]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004388:	492e      	ldr	r1, [pc, #184]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800439a:	d10c      	bne.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	2102      	movs	r1, #2
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 f850 	bl	8004448 <RCCEx_PLLSAI1_Config>
 80043a8:	4603      	mov	r3, r0
 80043aa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80043ac:	7ffb      	ldrb	r3, [r7, #31]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80043b2:	7ffb      	ldrb	r3, [r7, #31]
 80043b4:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00b      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043c2:	4b20      	ldr	r3, [pc, #128]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043c8:	f023 0204 	bic.w	r2, r3, #4
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043d2:	491c      	ldr	r1, [pc, #112]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80043e6:	4b17      	ldr	r3, [pc, #92]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ec:	f023 0218 	bic.w	r2, r3, #24
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f6:	4913      	ldr	r1, [pc, #76]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004406:	2b00      	cmp	r3, #0
 8004408:	d017      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800440a:	4b0e      	ldr	r3, [pc, #56]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800440c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004410:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800441a:	490a      	ldr	r1, [pc, #40]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004428:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800442c:	d105      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800442e:	4b05      	ldr	r3, [pc, #20]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	4a04      	ldr	r2, [pc, #16]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004434:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004438:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800443a:	7fbb      	ldrb	r3, [r7, #30]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3720      	adds	r7, #32
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}
 8004444:	40021000 	.word	0x40021000

08004448 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004452:	2300      	movs	r3, #0
 8004454:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2b03      	cmp	r3, #3
 800445c:	d018      	beq.n	8004490 <RCCEx_PLLSAI1_Config+0x48>
 800445e:	2b03      	cmp	r3, #3
 8004460:	d81f      	bhi.n	80044a2 <RCCEx_PLLSAI1_Config+0x5a>
 8004462:	2b01      	cmp	r3, #1
 8004464:	d002      	beq.n	800446c <RCCEx_PLLSAI1_Config+0x24>
 8004466:	2b02      	cmp	r3, #2
 8004468:	d009      	beq.n	800447e <RCCEx_PLLSAI1_Config+0x36>
 800446a:	e01a      	b.n	80044a2 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800446c:	4b65      	ldr	r3, [pc, #404]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0302 	and.w	r3, r3, #2
 8004474:	2b00      	cmp	r3, #0
 8004476:	d117      	bne.n	80044a8 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800447c:	e014      	b.n	80044a8 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800447e:	4b61      	ldr	r3, [pc, #388]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004486:	2b00      	cmp	r3, #0
 8004488:	d110      	bne.n	80044ac <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800448e:	e00d      	b.n	80044ac <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004490:	4b5c      	ldr	r3, [pc, #368]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d109      	bne.n	80044b0 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a0:	e006      	b.n	80044b0 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	73fb      	strb	r3, [r7, #15]
      break;
 80044a6:	e004      	b.n	80044b2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80044a8:	bf00      	nop
 80044aa:	e002      	b.n	80044b2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80044ac:	bf00      	nop
 80044ae:	e000      	b.n	80044b2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80044b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f040 809f 	bne.w	80045f8 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044ba:	4b52      	ldr	r3, [pc, #328]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a51      	ldr	r2, [pc, #324]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80044c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c6:	f7fd f801 	bl	80014cc <HAL_GetTick>
 80044ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044cc:	e00f      	b.n	80044ee <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044ce:	f7fc fffd 	bl	80014cc <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d908      	bls.n	80044ee <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044dc:	4b49      	ldr	r3, [pc, #292]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d009      	beq.n	80044fc <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044ec:	e006      	b.n	80044fc <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044ee:	4b45      	ldr	r3, [pc, #276]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1e9      	bne.n	80044ce <RCCEx_PLLSAI1_Config+0x86>
 80044fa:	e000      	b.n	80044fe <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80044fc:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80044fe:	7bfb      	ldrb	r3, [r7, #15]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d179      	bne.n	80045f8 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d116      	bne.n	8004538 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800450a:	4b3e      	ldr	r3, [pc, #248]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	4b3e      	ldr	r3, [pc, #248]	; (8004608 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004510:	4013      	ands	r3, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6892      	ldr	r2, [r2, #8]
 8004516:	0211      	lsls	r1, r2, #8
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	68d2      	ldr	r2, [r2, #12]
 800451c:	06d2      	lsls	r2, r2, #27
 800451e:	4311      	orrs	r1, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	6852      	ldr	r2, [r2, #4]
 8004524:	3a01      	subs	r2, #1
 8004526:	0112      	lsls	r2, r2, #4
 8004528:	4311      	orrs	r1, r2
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	6812      	ldr	r2, [r2, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	4934      	ldr	r1, [pc, #208]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004532:	4313      	orrs	r3, r2
 8004534:	610b      	str	r3, [r1, #16]
 8004536:	e033      	b.n	80045a0 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d118      	bne.n	8004570 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800453e:	4b31      	ldr	r3, [pc, #196]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004540:	691a      	ldr	r2, [r3, #16]
 8004542:	4b32      	ldr	r3, [pc, #200]	; (800460c <RCCEx_PLLSAI1_Config+0x1c4>)
 8004544:	4013      	ands	r3, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6892      	ldr	r2, [r2, #8]
 800454a:	0211      	lsls	r1, r2, #8
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6912      	ldr	r2, [r2, #16]
 8004550:	0852      	lsrs	r2, r2, #1
 8004552:	3a01      	subs	r2, #1
 8004554:	0552      	lsls	r2, r2, #21
 8004556:	4311      	orrs	r1, r2
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6852      	ldr	r2, [r2, #4]
 800455c:	3a01      	subs	r2, #1
 800455e:	0112      	lsls	r2, r2, #4
 8004560:	4311      	orrs	r1, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	4926      	ldr	r1, [pc, #152]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 800456a:	4313      	orrs	r3, r2
 800456c:	610b      	str	r3, [r1, #16]
 800456e:	e017      	b.n	80045a0 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004570:	4b24      	ldr	r3, [pc, #144]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	4b26      	ldr	r3, [pc, #152]	; (8004610 <RCCEx_PLLSAI1_Config+0x1c8>)
 8004576:	4013      	ands	r3, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6892      	ldr	r2, [r2, #8]
 800457c:	0211      	lsls	r1, r2, #8
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6952      	ldr	r2, [r2, #20]
 8004582:	0852      	lsrs	r2, r2, #1
 8004584:	3a01      	subs	r2, #1
 8004586:	0652      	lsls	r2, r2, #25
 8004588:	4311      	orrs	r1, r2
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6852      	ldr	r2, [r2, #4]
 800458e:	3a01      	subs	r2, #1
 8004590:	0112      	lsls	r2, r2, #4
 8004592:	4311      	orrs	r1, r2
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6812      	ldr	r2, [r2, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	491a      	ldr	r1, [pc, #104]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 800459c:	4313      	orrs	r3, r2
 800459e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045a0:	4b18      	ldr	r3, [pc, #96]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a17      	ldr	r2, [pc, #92]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ac:	f7fc ff8e 	bl	80014cc <HAL_GetTick>
 80045b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045b2:	e00f      	b.n	80045d4 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045b4:	f7fc ff8a 	bl	80014cc <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d908      	bls.n	80045d4 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045c2:	4b10      	ldr	r3, [pc, #64]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80045d2:	e006      	b.n	80045e2 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045d4:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0e9      	beq.n	80045b4 <RCCEx_PLLSAI1_Config+0x16c>
 80045e0:	e000      	b.n	80045e4 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80045e2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80045e4:	7bfb      	ldrb	r3, [r7, #15]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045ec:	691a      	ldr	r2, [r3, #16]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	4904      	ldr	r1, [pc, #16]	; (8004604 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40021000 	.word	0x40021000
 8004608:	07ff800c 	.word	0x07ff800c
 800460c:	ff9f800c 	.word	0xff9f800c
 8004610:	f9ff800c 	.word	0xf9ff800c

08004614 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b03      	cmp	r3, #3
 8004628:	d018      	beq.n	800465c <RCCEx_PLLSAI2_Config+0x48>
 800462a:	2b03      	cmp	r3, #3
 800462c:	d81f      	bhi.n	800466e <RCCEx_PLLSAI2_Config+0x5a>
 800462e:	2b01      	cmp	r3, #1
 8004630:	d002      	beq.n	8004638 <RCCEx_PLLSAI2_Config+0x24>
 8004632:	2b02      	cmp	r3, #2
 8004634:	d009      	beq.n	800464a <RCCEx_PLLSAI2_Config+0x36>
 8004636:	e01a      	b.n	800466e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004638:	4b4a      	ldr	r3, [pc, #296]	; (8004764 <RCCEx_PLLSAI2_Config+0x150>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d117      	bne.n	8004674 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004648:	e014      	b.n	8004674 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800464a:	4b46      	ldr	r3, [pc, #280]	; (8004764 <RCCEx_PLLSAI2_Config+0x150>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004652:	2b00      	cmp	r3, #0
 8004654:	d110      	bne.n	8004678 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800465a:	e00d      	b.n	8004678 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 800465c:	4b41      	ldr	r3, [pc, #260]	; (8004764 <RCCEx_PLLSAI2_Config+0x150>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d109      	bne.n	800467c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800466c:	e006      	b.n	800467c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	73fb      	strb	r3, [r7, #15]
      break;
 8004672:	e004      	b.n	800467e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004674:	bf00      	nop
 8004676:	e002      	b.n	800467e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004678:	bf00      	nop
 800467a:	e000      	b.n	800467e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800467c:	bf00      	nop
  }

  if (status == HAL_OK)
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d169      	bne.n	8004758 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004684:	4b37      	ldr	r3, [pc, #220]	; (8004764 <RCCEx_PLLSAI2_Config+0x150>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a36      	ldr	r2, [pc, #216]	; (8004764 <RCCEx_PLLSAI2_Config+0x150>)
 800468a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800468e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004690:	f7fc ff1c 	bl	80014cc <HAL_GetTick>
 8004694:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004696:	e00f      	b.n	80046b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004698:	f7fc ff18 	bl	80014cc <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d908      	bls.n	80046b8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046a6:	4b2f      	ldr	r3, [pc, #188]	; (8004764 <RCCEx_PLLSAI2_Config+0x150>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d009      	beq.n	80046c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80046b6:	e006      	b.n	80046c6 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046b8:	4b2a      	ldr	r3, [pc, #168]	; (8004764 <RCCEx_PLLSAI2_Config+0x150>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1e9      	bne.n	8004698 <RCCEx_PLLSAI2_Config+0x84>
 80046c4:	e000      	b.n	80046c8 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80046c6:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80046c8:	7bfb      	ldrb	r3, [r7, #15]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d144      	bne.n	8004758 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d115      	bne.n	8004700 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046d4:	4b23      	ldr	r3, [pc, #140]	; (8004764 <RCCEx_PLLSAI2_Config+0x150>)
 80046d6:	695a      	ldr	r2, [r3, #20]
 80046d8:	4b23      	ldr	r3, [pc, #140]	; (8004768 <RCCEx_PLLSAI2_Config+0x154>)
 80046da:	4013      	ands	r3, r2
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	6892      	ldr	r2, [r2, #8]
 80046e0:	0211      	lsls	r1, r2, #8
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68d2      	ldr	r2, [r2, #12]
 80046e6:	06d2      	lsls	r2, r2, #27
 80046e8:	4311      	orrs	r1, r2
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6852      	ldr	r2, [r2, #4]
 80046ee:	3a01      	subs	r2, #1
 80046f0:	0112      	lsls	r2, r2, #4
 80046f2:	4311      	orrs	r1, r2
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	430a      	orrs	r2, r1
 80046fa:	491a      	ldr	r1, [pc, #104]	; (8004764 <RCCEx_PLLSAI2_Config+0x150>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004700:	4b18      	ldr	r3, [pc, #96]	; (8004764 <RCCEx_PLLSAI2_Config+0x150>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a17      	ldr	r2, [pc, #92]	; (8004764 <RCCEx_PLLSAI2_Config+0x150>)
 8004706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470c:	f7fc fede 	bl	80014cc <HAL_GetTick>
 8004710:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004712:	e00f      	b.n	8004734 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004714:	f7fc feda 	bl	80014cc <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d908      	bls.n	8004734 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004722:	4b10      	ldr	r3, [pc, #64]	; (8004764 <RCCEx_PLLSAI2_Config+0x150>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d109      	bne.n	8004742 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004732:	e006      	b.n	8004742 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004734:	4b0b      	ldr	r3, [pc, #44]	; (8004764 <RCCEx_PLLSAI2_Config+0x150>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0e9      	beq.n	8004714 <RCCEx_PLLSAI2_Config+0x100>
 8004740:	e000      	b.n	8004744 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004742:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004744:	7bfb      	ldrb	r3, [r7, #15]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800474a:	4b06      	ldr	r3, [pc, #24]	; (8004764 <RCCEx_PLLSAI2_Config+0x150>)
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	4904      	ldr	r1, [pc, #16]	; (8004764 <RCCEx_PLLSAI2_Config+0x150>)
 8004754:	4313      	orrs	r3, r2
 8004756:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004758:	7bfb      	ldrb	r3, [r7, #15]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000
 8004768:	07ff800c 	.word	0x07ff800c

0800476c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d066      	beq.n	800484c <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fc fc50 	bl	8001038 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b10      	cmp	r3, #16
 80047ac:	d045      	beq.n	800483a <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80047ae:	4b2a      	ldr	r3, [pc, #168]	; (8004858 <HAL_RTC_Init+0xec>)
 80047b0:	22ca      	movs	r2, #202	; 0xca
 80047b2:	625a      	str	r2, [r3, #36]	; 0x24
 80047b4:	4b28      	ldr	r3, [pc, #160]	; (8004858 <HAL_RTC_Init+0xec>)
 80047b6:	2253      	movs	r2, #83	; 0x53
 80047b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f872 	bl	80048a4 <RTC_EnterInitMode>
 80047c0:	4603      	mov	r3, r0
 80047c2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d121      	bne.n	800480e <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80047ca:	4b23      	ldr	r3, [pc, #140]	; (8004858 <HAL_RTC_Init+0xec>)
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	4a22      	ldr	r2, [pc, #136]	; (8004858 <HAL_RTC_Init+0xec>)
 80047d0:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80047d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047d8:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80047da:	4b1f      	ldr	r3, [pc, #124]	; (8004858 <HAL_RTC_Init+0xec>)
 80047dc:	699a      	ldr	r2, [r3, #24]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6859      	ldr	r1, [r3, #4]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	4319      	orrs	r1, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	430b      	orrs	r3, r1
 80047ee:	491a      	ldr	r1, [pc, #104]	; (8004858 <HAL_RTC_Init+0xec>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	041b      	lsls	r3, r3, #16
 80047fe:	4916      	ldr	r1, [pc, #88]	; (8004858 <HAL_RTC_Init+0xec>)
 8004800:	4313      	orrs	r3, r2
 8004802:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f881 	bl	800490c <RTC_ExitInitMode>
 800480a:	4603      	mov	r3, r0
 800480c:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 800480e:	7bfb      	ldrb	r3, [r7, #15]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10e      	bne.n	8004832 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8004814:	4b10      	ldr	r3, [pc, #64]	; (8004858 <HAL_RTC_Init+0xec>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a19      	ldr	r1, [r3, #32]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	69db      	ldr	r3, [r3, #28]
 8004824:	4319      	orrs	r1, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	430b      	orrs	r3, r1
 800482c:	490a      	ldr	r1, [pc, #40]	; (8004858 <HAL_RTC_Init+0xec>)
 800482e:	4313      	orrs	r3, r2
 8004830:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004832:	4b09      	ldr	r3, [pc, #36]	; (8004858 <HAL_RTC_Init+0xec>)
 8004834:	22ff      	movs	r2, #255	; 0xff
 8004836:	625a      	str	r2, [r3, #36]	; 0x24
 8004838:	e001      	b.n	800483e <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800483a:	2300      	movs	r3, #0
 800483c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d103      	bne.n	800484c <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 800484c:	7bfb      	ldrb	r3, [r7, #15]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	40002800 	.word	0x40002800

0800485c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8004864:	4b0d      	ldr	r3, [pc, #52]	; (800489c <HAL_RTC_WaitForSynchro+0x40>)
 8004866:	4a0e      	ldr	r2, [pc, #56]	; (80048a0 <HAL_RTC_WaitForSynchro+0x44>)
 8004868:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800486a:	f7fc fe2f 	bl	80014cc <HAL_GetTick>
 800486e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004870:	e009      	b.n	8004886 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004872:	f7fc fe2b 	bl	80014cc <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004880:	d901      	bls.n	8004886 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e006      	b.n	8004894 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004886:	4b05      	ldr	r3, [pc, #20]	; (800489c <HAL_RTC_WaitForSynchro+0x40>)
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0ef      	beq.n	8004872 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40002800 	.word	0x40002800
 80048a0:	0001005c 	.word	0x0001005c

080048a4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80048b0:	4b15      	ldr	r3, [pc, #84]	; (8004908 <RTC_EnterInitMode+0x64>)
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d120      	bne.n	80048fe <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80048bc:	4b12      	ldr	r3, [pc, #72]	; (8004908 <RTC_EnterInitMode+0x64>)
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	4a11      	ldr	r2, [pc, #68]	; (8004908 <RTC_EnterInitMode+0x64>)
 80048c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80048c8:	f7fc fe00 	bl	80014cc <HAL_GetTick>
 80048cc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80048ce:	e00d      	b.n	80048ec <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80048d0:	f7fc fdfc 	bl	80014cc <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048de:	d905      	bls.n	80048ec <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2203      	movs	r2, #3
 80048e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80048ec:	4b06      	ldr	r3, [pc, #24]	; (8004908 <RTC_EnterInitMode+0x64>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d102      	bne.n	80048fe <RTC_EnterInitMode+0x5a>
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d1e8      	bne.n	80048d0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40002800 	.word	0x40002800

0800490c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004918:	4b1a      	ldr	r3, [pc, #104]	; (8004984 <RTC_ExitInitMode+0x78>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	4a19      	ldr	r2, [pc, #100]	; (8004984 <RTC_ExitInitMode+0x78>)
 800491e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004922:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004924:	4b17      	ldr	r3, [pc, #92]	; (8004984 <RTC_ExitInitMode+0x78>)
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d10c      	bne.n	800494a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff ff93 	bl	800485c <HAL_RTC_WaitForSynchro>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01e      	beq.n	800497a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2203      	movs	r2, #3
 8004940:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	73fb      	strb	r3, [r7, #15]
 8004948:	e017      	b.n	800497a <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800494a:	4b0e      	ldr	r3, [pc, #56]	; (8004984 <RTC_ExitInitMode+0x78>)
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	4a0d      	ldr	r2, [pc, #52]	; (8004984 <RTC_ExitInitMode+0x78>)
 8004950:	f023 0320 	bic.w	r3, r3, #32
 8004954:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff ff80 	bl	800485c <HAL_RTC_WaitForSynchro>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d005      	beq.n	800496e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2203      	movs	r2, #3
 8004966:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <RTC_ExitInitMode+0x78>)
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	4a04      	ldr	r2, [pc, #16]	; (8004984 <RTC_ExitInitMode+0x78>)
 8004974:	f043 0320 	orr.w	r3, r3, #32
 8004978:	6193      	str	r3, [r2, #24]
  }

  return status;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40002800 	.word	0x40002800

08004988 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	490f      	ldr	r1, [pc, #60]	; (80049d8 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 800499c:	4313      	orrs	r3, r2
 800499e:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	490c      	ldr	r1, [pc, #48]	; (80049dc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80049ae:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	6919      	ldr	r1, [r3, #16]
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	695b      	ldr	r3, [r3, #20]
 80049be:	041b      	lsls	r3, r3, #16
 80049c0:	430b      	orrs	r3, r1
 80049c2:	4906      	ldr	r1, [pc, #24]	; (80049dc <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40002800 	.word	0x40002800
 80049dc:	40003400 	.word	0x40003400

080049e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e049      	b.n	8004a86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fc fb54 	bl	80010b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f000 fa9e 	bl	8004f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b085      	sub	sp, #20
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d001      	beq.n	8004aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e04f      	b.n	8004b48 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f042 0201 	orr.w	r2, r2, #1
 8004abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a23      	ldr	r2, [pc, #140]	; (8004b54 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d01d      	beq.n	8004b06 <HAL_TIM_Base_Start_IT+0x76>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad2:	d018      	beq.n	8004b06 <HAL_TIM_Base_Start_IT+0x76>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1f      	ldr	r2, [pc, #124]	; (8004b58 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d013      	beq.n	8004b06 <HAL_TIM_Base_Start_IT+0x76>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1e      	ldr	r2, [pc, #120]	; (8004b5c <HAL_TIM_Base_Start_IT+0xcc>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d00e      	beq.n	8004b06 <HAL_TIM_Base_Start_IT+0x76>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <HAL_TIM_Base_Start_IT+0xd0>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d009      	beq.n	8004b06 <HAL_TIM_Base_Start_IT+0x76>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a1b      	ldr	r2, [pc, #108]	; (8004b64 <HAL_TIM_Base_Start_IT+0xd4>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d004      	beq.n	8004b06 <HAL_TIM_Base_Start_IT+0x76>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a19      	ldr	r2, [pc, #100]	; (8004b68 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d115      	bne.n	8004b32 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	4b17      	ldr	r3, [pc, #92]	; (8004b6c <HAL_TIM_Base_Start_IT+0xdc>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b06      	cmp	r3, #6
 8004b16:	d015      	beq.n	8004b44 <HAL_TIM_Base_Start_IT+0xb4>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1e:	d011      	beq.n	8004b44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b30:	e008      	b.n	8004b44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f042 0201 	orr.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]
 8004b42:	e000      	b.n	8004b46 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3714      	adds	r7, #20
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800
 8004b60:	40000c00 	.word	0x40000c00
 8004b64:	40013400 	.word	0x40013400
 8004b68:	40014000 	.word	0x40014000
 8004b6c:	00010007 	.word	0x00010007

08004b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d020      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01b      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0202 	mvn.w	r2, #2
 8004ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f003 0303 	and.w	r3, r3, #3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f9b2 	bl	8004f24 <HAL_TIM_IC_CaptureCallback>
 8004bc0:	e005      	b.n	8004bce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f9a4 	bl	8004f10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f9b5 	bl	8004f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f003 0304 	and.w	r3, r3, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d020      	beq.n	8004c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01b      	beq.n	8004c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0204 	mvn.w	r2, #4
 8004bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f98c 	bl	8004f24 <HAL_TIM_IC_CaptureCallback>
 8004c0c:	e005      	b.n	8004c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f97e 	bl	8004f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f98f 	bl	8004f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d020      	beq.n	8004c6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01b      	beq.n	8004c6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0208 	mvn.w	r2, #8
 8004c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2204      	movs	r2, #4
 8004c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f966 	bl	8004f24 <HAL_TIM_IC_CaptureCallback>
 8004c58:	e005      	b.n	8004c66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f958 	bl	8004f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f969 	bl	8004f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d020      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01b      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0210 	mvn.w	r2, #16
 8004c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f940 	bl	8004f24 <HAL_TIM_IC_CaptureCallback>
 8004ca4:	e005      	b.n	8004cb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f932 	bl	8004f10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 f943 	bl	8004f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0201 	mvn.w	r2, #1
 8004cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7fb ffbc 	bl	8000c54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d104      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00c      	beq.n	8004d0a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d007      	beq.n	8004d0a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 faff 	bl	8005308 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00c      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 faf7 	bl	800531c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00c      	beq.n	8004d52 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d007      	beq.n	8004d52 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 f8fd 	bl	8004f4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00c      	beq.n	8004d76 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d007      	beq.n	8004d76 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f06f 0220 	mvn.w	r2, #32
 8004d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fabf 	bl	80052f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d76:	bf00      	nop
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
 8004d86:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_TIM_ConfigClockSource+0x1c>
 8004d96:	2302      	movs	r3, #2
 8004d98:	e0b6      	b.n	8004f08 <HAL_TIM_ConfigClockSource+0x18a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2202      	movs	r2, #2
 8004da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004db8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dbc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dc4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd6:	d03e      	beq.n	8004e56 <HAL_TIM_ConfigClockSource+0xd8>
 8004dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ddc:	f200 8087 	bhi.w	8004eee <HAL_TIM_ConfigClockSource+0x170>
 8004de0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de4:	f000 8086 	beq.w	8004ef4 <HAL_TIM_ConfigClockSource+0x176>
 8004de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dec:	d87f      	bhi.n	8004eee <HAL_TIM_ConfigClockSource+0x170>
 8004dee:	2b70      	cmp	r3, #112	; 0x70
 8004df0:	d01a      	beq.n	8004e28 <HAL_TIM_ConfigClockSource+0xaa>
 8004df2:	2b70      	cmp	r3, #112	; 0x70
 8004df4:	d87b      	bhi.n	8004eee <HAL_TIM_ConfigClockSource+0x170>
 8004df6:	2b60      	cmp	r3, #96	; 0x60
 8004df8:	d050      	beq.n	8004e9c <HAL_TIM_ConfigClockSource+0x11e>
 8004dfa:	2b60      	cmp	r3, #96	; 0x60
 8004dfc:	d877      	bhi.n	8004eee <HAL_TIM_ConfigClockSource+0x170>
 8004dfe:	2b50      	cmp	r3, #80	; 0x50
 8004e00:	d03c      	beq.n	8004e7c <HAL_TIM_ConfigClockSource+0xfe>
 8004e02:	2b50      	cmp	r3, #80	; 0x50
 8004e04:	d873      	bhi.n	8004eee <HAL_TIM_ConfigClockSource+0x170>
 8004e06:	2b40      	cmp	r3, #64	; 0x40
 8004e08:	d058      	beq.n	8004ebc <HAL_TIM_ConfigClockSource+0x13e>
 8004e0a:	2b40      	cmp	r3, #64	; 0x40
 8004e0c:	d86f      	bhi.n	8004eee <HAL_TIM_ConfigClockSource+0x170>
 8004e0e:	2b30      	cmp	r3, #48	; 0x30
 8004e10:	d064      	beq.n	8004edc <HAL_TIM_ConfigClockSource+0x15e>
 8004e12:	2b30      	cmp	r3, #48	; 0x30
 8004e14:	d86b      	bhi.n	8004eee <HAL_TIM_ConfigClockSource+0x170>
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d060      	beq.n	8004edc <HAL_TIM_ConfigClockSource+0x15e>
 8004e1a:	2b20      	cmp	r3, #32
 8004e1c:	d867      	bhi.n	8004eee <HAL_TIM_ConfigClockSource+0x170>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d05c      	beq.n	8004edc <HAL_TIM_ConfigClockSource+0x15e>
 8004e22:	2b10      	cmp	r3, #16
 8004e24:	d05a      	beq.n	8004edc <HAL_TIM_ConfigClockSource+0x15e>
 8004e26:	e062      	b.n	8004eee <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e38:	f000 f9b4 	bl	80051a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e4a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	609a      	str	r2, [r3, #8]
      break;
 8004e54:	e04f      	b.n	8004ef6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e66:	f000 f99d 	bl	80051a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e78:	609a      	str	r2, [r3, #8]
      break;
 8004e7a:	e03c      	b.n	8004ef6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e88:	461a      	mov	r2, r3
 8004e8a:	f000 f90f 	bl	80050ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2150      	movs	r1, #80	; 0x50
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 f968 	bl	800516a <TIM_ITRx_SetConfig>
      break;
 8004e9a:	e02c      	b.n	8004ef6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ea8:	461a      	mov	r2, r3
 8004eaa:	f000 f92e 	bl	800510a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2160      	movs	r1, #96	; 0x60
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 f958 	bl	800516a <TIM_ITRx_SetConfig>
      break;
 8004eba:	e01c      	b.n	8004ef6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ec8:	461a      	mov	r2, r3
 8004eca:	f000 f8ef 	bl	80050ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2140      	movs	r1, #64	; 0x40
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 f948 	bl	800516a <TIM_ITRx_SetConfig>
      break;
 8004eda:	e00c      	b.n	8004ef6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	f000 f93f 	bl	800516a <TIM_ITRx_SetConfig>
      break;
 8004eec:	e003      	b.n	8004ef6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ef2:	e000      	b.n	8004ef6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ef4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f18:	bf00      	nop
 8004f1a:	370c      	adds	r7, #12
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f2c:	bf00      	nop
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4a:	4770      	bx	lr

08004f4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a46      	ldr	r2, [pc, #280]	; (800508c <TIM_Base_SetConfig+0x12c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d013      	beq.n	8004fa0 <TIM_Base_SetConfig+0x40>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7e:	d00f      	beq.n	8004fa0 <TIM_Base_SetConfig+0x40>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a43      	ldr	r2, [pc, #268]	; (8005090 <TIM_Base_SetConfig+0x130>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00b      	beq.n	8004fa0 <TIM_Base_SetConfig+0x40>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a42      	ldr	r2, [pc, #264]	; (8005094 <TIM_Base_SetConfig+0x134>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d007      	beq.n	8004fa0 <TIM_Base_SetConfig+0x40>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a41      	ldr	r2, [pc, #260]	; (8005098 <TIM_Base_SetConfig+0x138>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d003      	beq.n	8004fa0 <TIM_Base_SetConfig+0x40>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a40      	ldr	r2, [pc, #256]	; (800509c <TIM_Base_SetConfig+0x13c>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d108      	bne.n	8004fb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fa6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a35      	ldr	r2, [pc, #212]	; (800508c <TIM_Base_SetConfig+0x12c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d01f      	beq.n	8004ffa <TIM_Base_SetConfig+0x9a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc0:	d01b      	beq.n	8004ffa <TIM_Base_SetConfig+0x9a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a32      	ldr	r2, [pc, #200]	; (8005090 <TIM_Base_SetConfig+0x130>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d017      	beq.n	8004ffa <TIM_Base_SetConfig+0x9a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a31      	ldr	r2, [pc, #196]	; (8005094 <TIM_Base_SetConfig+0x134>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d013      	beq.n	8004ffa <TIM_Base_SetConfig+0x9a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a30      	ldr	r2, [pc, #192]	; (8005098 <TIM_Base_SetConfig+0x138>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d00f      	beq.n	8004ffa <TIM_Base_SetConfig+0x9a>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2f      	ldr	r2, [pc, #188]	; (800509c <TIM_Base_SetConfig+0x13c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00b      	beq.n	8004ffa <TIM_Base_SetConfig+0x9a>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2e      	ldr	r2, [pc, #184]	; (80050a0 <TIM_Base_SetConfig+0x140>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d007      	beq.n	8004ffa <TIM_Base_SetConfig+0x9a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2d      	ldr	r2, [pc, #180]	; (80050a4 <TIM_Base_SetConfig+0x144>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d003      	beq.n	8004ffa <TIM_Base_SetConfig+0x9a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2c      	ldr	r2, [pc, #176]	; (80050a8 <TIM_Base_SetConfig+0x148>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d108      	bne.n	800500c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	4313      	orrs	r3, r2
 8005018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a16      	ldr	r2, [pc, #88]	; (800508c <TIM_Base_SetConfig+0x12c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00f      	beq.n	8005058 <TIM_Base_SetConfig+0xf8>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	4a18      	ldr	r2, [pc, #96]	; (800509c <TIM_Base_SetConfig+0x13c>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00b      	beq.n	8005058 <TIM_Base_SetConfig+0xf8>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a17      	ldr	r2, [pc, #92]	; (80050a0 <TIM_Base_SetConfig+0x140>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d007      	beq.n	8005058 <TIM_Base_SetConfig+0xf8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a16      	ldr	r2, [pc, #88]	; (80050a4 <TIM_Base_SetConfig+0x144>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_Base_SetConfig+0xf8>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a15      	ldr	r2, [pc, #84]	; (80050a8 <TIM_Base_SetConfig+0x148>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d103      	bne.n	8005060 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	691a      	ldr	r2, [r3, #16]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	2b01      	cmp	r3, #1
 8005070:	d105      	bne.n	800507e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f023 0201 	bic.w	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	611a      	str	r2, [r3, #16]
  }
}
 800507e:	bf00      	nop
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40012c00 	.word	0x40012c00
 8005090:	40000400 	.word	0x40000400
 8005094:	40000800 	.word	0x40000800
 8005098:	40000c00 	.word	0x40000c00
 800509c:	40013400 	.word	0x40013400
 80050a0:	40014000 	.word	0x40014000
 80050a4:	40014400 	.word	0x40014400
 80050a8:	40014800 	.word	0x40014800

080050ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a1b      	ldr	r3, [r3, #32]
 80050bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f023 0201 	bic.w	r2, r3, #1
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f023 030a 	bic.w	r3, r3, #10
 80050e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	621a      	str	r2, [r3, #32]
}
 80050fe:	bf00      	nop
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800510a:	b480      	push	{r7}
 800510c:	b087      	sub	sp, #28
 800510e:	af00      	add	r7, sp, #0
 8005110:	60f8      	str	r0, [r7, #12]
 8005112:	60b9      	str	r1, [r7, #8]
 8005114:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	f023 0210 	bic.w	r2, r3, #16
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	699b      	ldr	r3, [r3, #24]
 800512c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005134:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	031b      	lsls	r3, r3, #12
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005146:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	621a      	str	r2, [r3, #32]
}
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800516a:	b480      	push	{r7}
 800516c:	b085      	sub	sp, #20
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	f043 0307 	orr.w	r3, r3, #7
 8005190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	609a      	str	r2, [r3, #8]
}
 8005198:	bf00      	nop
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	021a      	lsls	r2, r3, #8
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	431a      	orrs	r2, r3
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	609a      	str	r2, [r3, #8]
}
 80051d8:	bf00      	nop
 80051da:	371c      	adds	r7, #28
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e068      	b.n	80052ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a2e      	ldr	r2, [pc, #184]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d004      	beq.n	8005230 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a2d      	ldr	r2, [pc, #180]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d108      	bne.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005236:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	4313      	orrs	r3, r2
 8005240:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005248:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68fa      	ldr	r2, [r7, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1e      	ldr	r2, [pc, #120]	; (80052dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d01d      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526e:	d018      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a1b      	ldr	r2, [pc, #108]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d013      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1a      	ldr	r2, [pc, #104]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00e      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a18      	ldr	r2, [pc, #96]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d009      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a13      	ldr	r2, [pc, #76]	; (80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d004      	beq.n	80052a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a14      	ldr	r2, [pc, #80]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d10c      	bne.n	80052bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40012c00 	.word	0x40012c00
 80052e0:	40013400 	.word	0x40013400
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800
 80052ec:	40000c00 	.word	0x40000c00
 80052f0:	40014000 	.word	0x40014000

080052f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e042      	b.n	80053c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005348:	2b00      	cmp	r3, #0
 800534a:	d106      	bne.n	800535a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f7fb fe0f 	bl	8000f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2224      	movs	r2, #36	; 0x24
 800535e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0201 	bic.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005376:	2b00      	cmp	r3, #0
 8005378:	d002      	beq.n	8005380 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 fb28 	bl	80059d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f825 	bl	80053d0 <UART_SetConfig>
 8005386:	4603      	mov	r3, r0
 8005388:	2b01      	cmp	r3, #1
 800538a:	d101      	bne.n	8005390 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e01b      	b.n	80053c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800539e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689a      	ldr	r2, [r3, #8]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0201 	orr.w	r2, r2, #1
 80053be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 fba7 	bl	8005b14 <UART_CheckIdleState>
 80053c6:	4603      	mov	r3, r0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053d4:	b08c      	sub	sp, #48	; 0x30
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	431a      	orrs	r2, r3
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	431a      	orrs	r2, r3
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4baa      	ldr	r3, [pc, #680]	; (80056a8 <UART_SetConfig+0x2d8>)
 8005400:	4013      	ands	r3, r2
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	6812      	ldr	r2, [r2, #0]
 8005406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005408:	430b      	orrs	r3, r1
 800540a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a9f      	ldr	r2, [pc, #636]	; (80056ac <UART_SetConfig+0x2dc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d004      	beq.n	800543c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	6a1b      	ldr	r3, [r3, #32]
 8005436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005438:	4313      	orrs	r3, r2
 800543a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005446:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	6812      	ldr	r2, [r2, #0]
 800544e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005450:	430b      	orrs	r3, r1
 8005452:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545a:	f023 010f 	bic.w	r1, r3, #15
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	430a      	orrs	r2, r1
 8005468:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a90      	ldr	r2, [pc, #576]	; (80056b0 <UART_SetConfig+0x2e0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d125      	bne.n	80054c0 <UART_SetConfig+0xf0>
 8005474:	4b8f      	ldr	r3, [pc, #572]	; (80056b4 <UART_SetConfig+0x2e4>)
 8005476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547a:	f003 0303 	and.w	r3, r3, #3
 800547e:	2b03      	cmp	r3, #3
 8005480:	d81a      	bhi.n	80054b8 <UART_SetConfig+0xe8>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <UART_SetConfig+0xb8>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	08005499 	.word	0x08005499
 800548c:	080054a9 	.word	0x080054a9
 8005490:	080054a1 	.word	0x080054a1
 8005494:	080054b1 	.word	0x080054b1
 8005498:	2301      	movs	r3, #1
 800549a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800549e:	e116      	b.n	80056ce <UART_SetConfig+0x2fe>
 80054a0:	2302      	movs	r3, #2
 80054a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054a6:	e112      	b.n	80056ce <UART_SetConfig+0x2fe>
 80054a8:	2304      	movs	r3, #4
 80054aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ae:	e10e      	b.n	80056ce <UART_SetConfig+0x2fe>
 80054b0:	2308      	movs	r3, #8
 80054b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054b6:	e10a      	b.n	80056ce <UART_SetConfig+0x2fe>
 80054b8:	2310      	movs	r3, #16
 80054ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054be:	e106      	b.n	80056ce <UART_SetConfig+0x2fe>
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a7c      	ldr	r2, [pc, #496]	; (80056b8 <UART_SetConfig+0x2e8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d138      	bne.n	800553c <UART_SetConfig+0x16c>
 80054ca:	4b7a      	ldr	r3, [pc, #488]	; (80056b4 <UART_SetConfig+0x2e4>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f003 030c 	and.w	r3, r3, #12
 80054d4:	2b0c      	cmp	r3, #12
 80054d6:	d82d      	bhi.n	8005534 <UART_SetConfig+0x164>
 80054d8:	a201      	add	r2, pc, #4	; (adr r2, 80054e0 <UART_SetConfig+0x110>)
 80054da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054de:	bf00      	nop
 80054e0:	08005515 	.word	0x08005515
 80054e4:	08005535 	.word	0x08005535
 80054e8:	08005535 	.word	0x08005535
 80054ec:	08005535 	.word	0x08005535
 80054f0:	08005525 	.word	0x08005525
 80054f4:	08005535 	.word	0x08005535
 80054f8:	08005535 	.word	0x08005535
 80054fc:	08005535 	.word	0x08005535
 8005500:	0800551d 	.word	0x0800551d
 8005504:	08005535 	.word	0x08005535
 8005508:	08005535 	.word	0x08005535
 800550c:	08005535 	.word	0x08005535
 8005510:	0800552d 	.word	0x0800552d
 8005514:	2300      	movs	r3, #0
 8005516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800551a:	e0d8      	b.n	80056ce <UART_SetConfig+0x2fe>
 800551c:	2302      	movs	r3, #2
 800551e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005522:	e0d4      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005524:	2304      	movs	r3, #4
 8005526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800552a:	e0d0      	b.n	80056ce <UART_SetConfig+0x2fe>
 800552c:	2308      	movs	r3, #8
 800552e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005532:	e0cc      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005534:	2310      	movs	r3, #16
 8005536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800553a:	e0c8      	b.n	80056ce <UART_SetConfig+0x2fe>
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a5e      	ldr	r2, [pc, #376]	; (80056bc <UART_SetConfig+0x2ec>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d125      	bne.n	8005592 <UART_SetConfig+0x1c2>
 8005546:	4b5b      	ldr	r3, [pc, #364]	; (80056b4 <UART_SetConfig+0x2e4>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005550:	2b30      	cmp	r3, #48	; 0x30
 8005552:	d016      	beq.n	8005582 <UART_SetConfig+0x1b2>
 8005554:	2b30      	cmp	r3, #48	; 0x30
 8005556:	d818      	bhi.n	800558a <UART_SetConfig+0x1ba>
 8005558:	2b20      	cmp	r3, #32
 800555a:	d00a      	beq.n	8005572 <UART_SetConfig+0x1a2>
 800555c:	2b20      	cmp	r3, #32
 800555e:	d814      	bhi.n	800558a <UART_SetConfig+0x1ba>
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <UART_SetConfig+0x19a>
 8005564:	2b10      	cmp	r3, #16
 8005566:	d008      	beq.n	800557a <UART_SetConfig+0x1aa>
 8005568:	e00f      	b.n	800558a <UART_SetConfig+0x1ba>
 800556a:	2300      	movs	r3, #0
 800556c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005570:	e0ad      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005572:	2302      	movs	r3, #2
 8005574:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005578:	e0a9      	b.n	80056ce <UART_SetConfig+0x2fe>
 800557a:	2304      	movs	r3, #4
 800557c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005580:	e0a5      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005582:	2308      	movs	r3, #8
 8005584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005588:	e0a1      	b.n	80056ce <UART_SetConfig+0x2fe>
 800558a:	2310      	movs	r3, #16
 800558c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005590:	e09d      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a4a      	ldr	r2, [pc, #296]	; (80056c0 <UART_SetConfig+0x2f0>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d125      	bne.n	80055e8 <UART_SetConfig+0x218>
 800559c:	4b45      	ldr	r3, [pc, #276]	; (80056b4 <UART_SetConfig+0x2e4>)
 800559e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055a2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055a6:	2bc0      	cmp	r3, #192	; 0xc0
 80055a8:	d016      	beq.n	80055d8 <UART_SetConfig+0x208>
 80055aa:	2bc0      	cmp	r3, #192	; 0xc0
 80055ac:	d818      	bhi.n	80055e0 <UART_SetConfig+0x210>
 80055ae:	2b80      	cmp	r3, #128	; 0x80
 80055b0:	d00a      	beq.n	80055c8 <UART_SetConfig+0x1f8>
 80055b2:	2b80      	cmp	r3, #128	; 0x80
 80055b4:	d814      	bhi.n	80055e0 <UART_SetConfig+0x210>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <UART_SetConfig+0x1f0>
 80055ba:	2b40      	cmp	r3, #64	; 0x40
 80055bc:	d008      	beq.n	80055d0 <UART_SetConfig+0x200>
 80055be:	e00f      	b.n	80055e0 <UART_SetConfig+0x210>
 80055c0:	2300      	movs	r3, #0
 80055c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055c6:	e082      	b.n	80056ce <UART_SetConfig+0x2fe>
 80055c8:	2302      	movs	r3, #2
 80055ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ce:	e07e      	b.n	80056ce <UART_SetConfig+0x2fe>
 80055d0:	2304      	movs	r3, #4
 80055d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055d6:	e07a      	b.n	80056ce <UART_SetConfig+0x2fe>
 80055d8:	2308      	movs	r3, #8
 80055da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055de:	e076      	b.n	80056ce <UART_SetConfig+0x2fe>
 80055e0:	2310      	movs	r3, #16
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055e6:	e072      	b.n	80056ce <UART_SetConfig+0x2fe>
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a35      	ldr	r2, [pc, #212]	; (80056c4 <UART_SetConfig+0x2f4>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d12a      	bne.n	8005648 <UART_SetConfig+0x278>
 80055f2:	4b30      	ldr	r3, [pc, #192]	; (80056b4 <UART_SetConfig+0x2e4>)
 80055f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005600:	d01a      	beq.n	8005638 <UART_SetConfig+0x268>
 8005602:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005606:	d81b      	bhi.n	8005640 <UART_SetConfig+0x270>
 8005608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800560c:	d00c      	beq.n	8005628 <UART_SetConfig+0x258>
 800560e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005612:	d815      	bhi.n	8005640 <UART_SetConfig+0x270>
 8005614:	2b00      	cmp	r3, #0
 8005616:	d003      	beq.n	8005620 <UART_SetConfig+0x250>
 8005618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800561c:	d008      	beq.n	8005630 <UART_SetConfig+0x260>
 800561e:	e00f      	b.n	8005640 <UART_SetConfig+0x270>
 8005620:	2300      	movs	r3, #0
 8005622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005626:	e052      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005628:	2302      	movs	r3, #2
 800562a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800562e:	e04e      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005630:	2304      	movs	r3, #4
 8005632:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005636:	e04a      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005638:	2308      	movs	r3, #8
 800563a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800563e:	e046      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005640:	2310      	movs	r3, #16
 8005642:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005646:	e042      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a17      	ldr	r2, [pc, #92]	; (80056ac <UART_SetConfig+0x2dc>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d13a      	bne.n	80056c8 <UART_SetConfig+0x2f8>
 8005652:	4b18      	ldr	r3, [pc, #96]	; (80056b4 <UART_SetConfig+0x2e4>)
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005658:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800565c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005660:	d01a      	beq.n	8005698 <UART_SetConfig+0x2c8>
 8005662:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005666:	d81b      	bhi.n	80056a0 <UART_SetConfig+0x2d0>
 8005668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800566c:	d00c      	beq.n	8005688 <UART_SetConfig+0x2b8>
 800566e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005672:	d815      	bhi.n	80056a0 <UART_SetConfig+0x2d0>
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <UART_SetConfig+0x2b0>
 8005678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567c:	d008      	beq.n	8005690 <UART_SetConfig+0x2c0>
 800567e:	e00f      	b.n	80056a0 <UART_SetConfig+0x2d0>
 8005680:	2300      	movs	r3, #0
 8005682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005686:	e022      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005688:	2302      	movs	r3, #2
 800568a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800568e:	e01e      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005690:	2304      	movs	r3, #4
 8005692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005696:	e01a      	b.n	80056ce <UART_SetConfig+0x2fe>
 8005698:	2308      	movs	r3, #8
 800569a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800569e:	e016      	b.n	80056ce <UART_SetConfig+0x2fe>
 80056a0:	2310      	movs	r3, #16
 80056a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056a6:	e012      	b.n	80056ce <UART_SetConfig+0x2fe>
 80056a8:	cfff69f3 	.word	0xcfff69f3
 80056ac:	40008000 	.word	0x40008000
 80056b0:	40013800 	.word	0x40013800
 80056b4:	40021000 	.word	0x40021000
 80056b8:	40004400 	.word	0x40004400
 80056bc:	40004800 	.word	0x40004800
 80056c0:	40004c00 	.word	0x40004c00
 80056c4:	40005000 	.word	0x40005000
 80056c8:	2310      	movs	r3, #16
 80056ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4ab0      	ldr	r2, [pc, #704]	; (8005994 <UART_SetConfig+0x5c4>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	f040 809b 	bne.w	8005810 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d827      	bhi.n	8005732 <UART_SetConfig+0x362>
 80056e2:	a201      	add	r2, pc, #4	; (adr r2, 80056e8 <UART_SetConfig+0x318>)
 80056e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056e8:	0800570d 	.word	0x0800570d
 80056ec:	08005715 	.word	0x08005715
 80056f0:	0800571d 	.word	0x0800571d
 80056f4:	08005733 	.word	0x08005733
 80056f8:	08005723 	.word	0x08005723
 80056fc:	08005733 	.word	0x08005733
 8005700:	08005733 	.word	0x08005733
 8005704:	08005733 	.word	0x08005733
 8005708:	0800572b 	.word	0x0800572b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800570c:	f7fe fa1e 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 8005710:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005712:	e014      	b.n	800573e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005714:	f7fe fa2e 	bl	8003b74 <HAL_RCC_GetPCLK2Freq>
 8005718:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800571a:	e010      	b.n	800573e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800571c:	4b9e      	ldr	r3, [pc, #632]	; (8005998 <UART_SetConfig+0x5c8>)
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005720:	e00d      	b.n	800573e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005722:	f7fe f961 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8005726:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005728:	e009      	b.n	800573e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800572a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005730:	e005      	b.n	800573e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8005732:	2300      	movs	r3, #0
 8005734:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800573c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 8130 	beq.w	80059a6 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574a:	4a94      	ldr	r2, [pc, #592]	; (800599c <UART_SetConfig+0x5cc>)
 800574c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005750:	461a      	mov	r2, r3
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	fbb3 f3f2 	udiv	r3, r3, r2
 8005758:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	4413      	add	r3, r2
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	429a      	cmp	r2, r3
 8005768:	d305      	bcc.n	8005776 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005770:	69ba      	ldr	r2, [r7, #24]
 8005772:	429a      	cmp	r2, r3
 8005774:	d903      	bls.n	800577e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800577c:	e113      	b.n	80059a6 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	2200      	movs	r2, #0
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	60fa      	str	r2, [r7, #12]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	4a84      	ldr	r2, [pc, #528]	; (800599c <UART_SetConfig+0x5cc>)
 800578c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005790:	b29b      	uxth	r3, r3
 8005792:	2200      	movs	r2, #0
 8005794:	603b      	str	r3, [r7, #0]
 8005796:	607a      	str	r2, [r7, #4]
 8005798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800579c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057a0:	f7fa fd48 	bl	8000234 <__aeabi_uldivmod>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4610      	mov	r0, r2
 80057aa:	4619      	mov	r1, r3
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	020b      	lsls	r3, r1, #8
 80057b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057ba:	0202      	lsls	r2, r0, #8
 80057bc:	6979      	ldr	r1, [r7, #20]
 80057be:	6849      	ldr	r1, [r1, #4]
 80057c0:	0849      	lsrs	r1, r1, #1
 80057c2:	2000      	movs	r0, #0
 80057c4:	460c      	mov	r4, r1
 80057c6:	4605      	mov	r5, r0
 80057c8:	eb12 0804 	adds.w	r8, r2, r4
 80057cc:	eb43 0905 	adc.w	r9, r3, r5
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	469a      	mov	sl, r3
 80057d8:	4693      	mov	fp, r2
 80057da:	4652      	mov	r2, sl
 80057dc:	465b      	mov	r3, fp
 80057de:	4640      	mov	r0, r8
 80057e0:	4649      	mov	r1, r9
 80057e2:	f7fa fd27 	bl	8000234 <__aeabi_uldivmod>
 80057e6:	4602      	mov	r2, r0
 80057e8:	460b      	mov	r3, r1
 80057ea:	4613      	mov	r3, r2
 80057ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057f4:	d308      	bcc.n	8005808 <UART_SetConfig+0x438>
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057fc:	d204      	bcs.n	8005808 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	6a3a      	ldr	r2, [r7, #32]
 8005804:	60da      	str	r2, [r3, #12]
 8005806:	e0ce      	b.n	80059a6 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800580e:	e0ca      	b.n	80059a6 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005818:	d166      	bne.n	80058e8 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800581a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800581e:	2b08      	cmp	r3, #8
 8005820:	d827      	bhi.n	8005872 <UART_SetConfig+0x4a2>
 8005822:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <UART_SetConfig+0x458>)
 8005824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005828:	0800584d 	.word	0x0800584d
 800582c:	08005855 	.word	0x08005855
 8005830:	0800585d 	.word	0x0800585d
 8005834:	08005873 	.word	0x08005873
 8005838:	08005863 	.word	0x08005863
 800583c:	08005873 	.word	0x08005873
 8005840:	08005873 	.word	0x08005873
 8005844:	08005873 	.word	0x08005873
 8005848:	0800586b 	.word	0x0800586b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800584c:	f7fe f97e 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 8005850:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005852:	e014      	b.n	800587e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005854:	f7fe f98e 	bl	8003b74 <HAL_RCC_GetPCLK2Freq>
 8005858:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800585a:	e010      	b.n	800587e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800585c:	4b4e      	ldr	r3, [pc, #312]	; (8005998 <UART_SetConfig+0x5c8>)
 800585e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005860:	e00d      	b.n	800587e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005862:	f7fe f8c1 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8005866:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005868:	e009      	b.n	800587e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800586e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005870:	e005      	b.n	800587e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800587c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800587e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 8090 	beq.w	80059a6 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	4a44      	ldr	r2, [pc, #272]	; (800599c <UART_SetConfig+0x5cc>)
 800588c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005890:	461a      	mov	r2, r3
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	fbb3 f3f2 	udiv	r3, r3, r2
 8005898:	005a      	lsls	r2, r3, #1
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	085b      	lsrs	r3, r3, #1
 80058a0:	441a      	add	r2, r3
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ac:	6a3b      	ldr	r3, [r7, #32]
 80058ae:	2b0f      	cmp	r3, #15
 80058b0:	d916      	bls.n	80058e0 <UART_SetConfig+0x510>
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b8:	d212      	bcs.n	80058e0 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f023 030f 	bic.w	r3, r3, #15
 80058c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058c4:	6a3b      	ldr	r3, [r7, #32]
 80058c6:	085b      	lsrs	r3, r3, #1
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	8bfb      	ldrh	r3, [r7, #30]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	8bfa      	ldrh	r2, [r7, #30]
 80058dc:	60da      	str	r2, [r3, #12]
 80058de:	e062      	b.n	80059a6 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80058e6:	e05e      	b.n	80059a6 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80058ec:	2b08      	cmp	r3, #8
 80058ee:	d828      	bhi.n	8005942 <UART_SetConfig+0x572>
 80058f0:	a201      	add	r2, pc, #4	; (adr r2, 80058f8 <UART_SetConfig+0x528>)
 80058f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f6:	bf00      	nop
 80058f8:	0800591d 	.word	0x0800591d
 80058fc:	08005925 	.word	0x08005925
 8005900:	0800592d 	.word	0x0800592d
 8005904:	08005943 	.word	0x08005943
 8005908:	08005933 	.word	0x08005933
 800590c:	08005943 	.word	0x08005943
 8005910:	08005943 	.word	0x08005943
 8005914:	08005943 	.word	0x08005943
 8005918:	0800593b 	.word	0x0800593b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800591c:	f7fe f916 	bl	8003b4c <HAL_RCC_GetPCLK1Freq>
 8005920:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005922:	e014      	b.n	800594e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005924:	f7fe f926 	bl	8003b74 <HAL_RCC_GetPCLK2Freq>
 8005928:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800592a:	e010      	b.n	800594e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800592c:	4b1a      	ldr	r3, [pc, #104]	; (8005998 <UART_SetConfig+0x5c8>)
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005930:	e00d      	b.n	800594e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005932:	f7fe f859 	bl	80039e8 <HAL_RCC_GetSysClockFreq>
 8005936:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005938:	e009      	b.n	800594e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005940:	e005      	b.n	800594e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800594c:	bf00      	nop
    }

    if (pclk != 0U)
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	2b00      	cmp	r3, #0
 8005952:	d028      	beq.n	80059a6 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	4a10      	ldr	r2, [pc, #64]	; (800599c <UART_SetConfig+0x5cc>)
 800595a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800595e:	461a      	mov	r2, r3
 8005960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005962:	fbb3 f2f2 	udiv	r2, r3, r2
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	085b      	lsrs	r3, r3, #1
 800596c:	441a      	add	r2, r3
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	fbb2 f3f3 	udiv	r3, r2, r3
 8005976:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	2b0f      	cmp	r3, #15
 800597c:	d910      	bls.n	80059a0 <UART_SetConfig+0x5d0>
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005984:	d20c      	bcs.n	80059a0 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	b29a      	uxth	r2, r3
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60da      	str	r2, [r3, #12]
 8005990:	e009      	b.n	80059a6 <UART_SetConfig+0x5d6>
 8005992:	bf00      	nop
 8005994:	40008000 	.word	0x40008000
 8005998:	00f42400 	.word	0x00f42400
 800599c:	080064c0 	.word	0x080064c0
      }
      else
      {
        ret = HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	2200      	movs	r2, #0
 80059ba:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	2200      	movs	r2, #0
 80059c0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80059c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3730      	adds	r7, #48	; 0x30
 80059ca:	46bd      	mov	sp, r7
 80059cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080059d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	f003 0301 	and.w	r3, r3, #1
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	430a      	orrs	r2, r1
 8005a1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00a      	beq.n	8005a3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00a      	beq.n	8005a60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a64:	f003 0310 	and.w	r3, r3, #16
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00a      	beq.n	8005a82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a86:	f003 0320 	and.w	r3, r3, #32
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01a      	beq.n	8005ae6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ace:	d10a      	bne.n	8005ae6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	430a      	orrs	r2, r1
 8005ae4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	430a      	orrs	r2, r1
 8005b06:	605a      	str	r2, [r3, #4]
  }
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b098      	sub	sp, #96	; 0x60
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b24:	f7fb fcd2 	bl	80014cc <HAL_GetTick>
 8005b28:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b08      	cmp	r3, #8
 8005b36:	d12f      	bne.n	8005b98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b38:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b3c:	9300      	str	r3, [sp, #0]
 8005b3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b40:	2200      	movs	r2, #0
 8005b42:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 f88e 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d022      	beq.n	8005b98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	e853 3f00 	ldrex	r3, [r3]
 8005b5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b66:	653b      	str	r3, [r7, #80]	; 0x50
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b70:	647b      	str	r3, [r7, #68]	; 0x44
 8005b72:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b78:	e841 2300 	strex	r3, r2, [r1]
 8005b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e6      	bne.n	8005b52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2220      	movs	r2, #32
 8005b88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e063      	b.n	8005c60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0304 	and.w	r3, r3, #4
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	d149      	bne.n	8005c3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ba6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f857 	bl	8005c68 <UART_WaitOnFlagUntilTimeout>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d03c      	beq.n	8005c3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	e853 3f00 	ldrex	r3, [r3]
 8005bcc:	623b      	str	r3, [r7, #32]
   return(result);
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	461a      	mov	r2, r3
 8005bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bde:	633b      	str	r3, [r7, #48]	; 0x30
 8005be0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005be6:	e841 2300 	strex	r3, r2, [r1]
 8005bea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1e6      	bne.n	8005bc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	e853 3f00 	ldrex	r3, [r3]
 8005c00:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f023 0301 	bic.w	r3, r3, #1
 8005c08:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	3308      	adds	r3, #8
 8005c10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c12:	61fa      	str	r2, [r7, #28]
 8005c14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c16:	69b9      	ldr	r1, [r7, #24]
 8005c18:	69fa      	ldr	r2, [r7, #28]
 8005c1a:	e841 2300 	strex	r3, r2, [r1]
 8005c1e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1e5      	bne.n	8005bf2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e012      	b.n	8005c60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3758      	adds	r7, #88	; 0x58
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	603b      	str	r3, [r7, #0]
 8005c74:	4613      	mov	r3, r2
 8005c76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c78:	e04f      	b.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c80:	d04b      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c82:	f7fb fc23 	bl	80014cc <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	69ba      	ldr	r2, [r7, #24]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d302      	bcc.n	8005c98 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e04e      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0304 	and.w	r3, r3, #4
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d037      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	2b80      	cmp	r3, #128	; 0x80
 8005cae:	d034      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b40      	cmp	r3, #64	; 0x40
 8005cb4:	d031      	beq.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	f003 0308 	and.w	r3, r3, #8
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d110      	bne.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2208      	movs	r2, #8
 8005cca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f838 	bl	8005d42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e029      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cf4:	d111      	bne.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 f81e 	bl	8005d42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005d16:	2303      	movs	r3, #3
 8005d18:	e00f      	b.n	8005d3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	69da      	ldr	r2, [r3, #28]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	4013      	ands	r3, r2
 8005d24:	68ba      	ldr	r2, [r7, #8]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	bf0c      	ite	eq
 8005d2a:	2301      	moveq	r3, #1
 8005d2c:	2300      	movne	r3, #0
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	461a      	mov	r2, r3
 8005d32:	79fb      	ldrb	r3, [r7, #7]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d0a0      	beq.n	8005c7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3710      	adds	r7, #16
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b095      	sub	sp, #84	; 0x54
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d52:	e853 3f00 	ldrex	r3, [r3]
 8005d56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	461a      	mov	r2, r3
 8005d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d68:	643b      	str	r3, [r7, #64]	; 0x40
 8005d6a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d70:	e841 2300 	strex	r3, r2, [r1]
 8005d74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d1e6      	bne.n	8005d4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3308      	adds	r3, #8
 8005d82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d92:	f023 0301 	bic.w	r3, r3, #1
 8005d96:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005da0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005da2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e3      	bne.n	8005d7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d118      	bne.n	8005dee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	f023 0310 	bic.w	r3, r3, #16
 8005dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dda:	61bb      	str	r3, [r7, #24]
 8005ddc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dde:	6979      	ldr	r1, [r7, #20]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	e841 2300 	strex	r3, r2, [r1]
 8005de6:	613b      	str	r3, [r7, #16]
   return(result);
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d1e6      	bne.n	8005dbc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2220      	movs	r2, #32
 8005df2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005e02:	bf00      	nop
 8005e04:	3754      	adds	r7, #84	; 0x54
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e0e:	b480      	push	{r7}
 8005e10:	b085      	sub	sp, #20
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d101      	bne.n	8005e24 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e20:	2302      	movs	r3, #2
 8005e22:	e027      	b.n	8005e74 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2224      	movs	r2, #36	; 0x24
 8005e30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0201 	bic.w	r2, r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e52:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68fa      	ldr	r2, [r7, #12]
 8005e60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e72:	2300      	movs	r3, #0
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3714      	adds	r7, #20
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e94:	2302      	movs	r3, #2
 8005e96:	e02d      	b.n	8005ef4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2224      	movs	r2, #36	; 0x24
 8005ea4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0201 	bic.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 f84f 	bl	8005f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e02d      	b.n	8005f70 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2224      	movs	r2, #36	; 0x24
 8005f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0201 	bic.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	683a      	ldr	r2, [r7, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 f811 	bl	8005f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2220      	movs	r2, #32
 8005f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d108      	bne.n	8005f9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f98:	e031      	b.n	8005ffe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f9a:	2308      	movs	r3, #8
 8005f9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f9e:	2308      	movs	r3, #8
 8005fa0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	0e5b      	lsrs	r3, r3, #25
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	0f5b      	lsrs	r3, r3, #29
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fc2:	7bbb      	ldrb	r3, [r7, #14]
 8005fc4:	7b3a      	ldrb	r2, [r7, #12]
 8005fc6:	4911      	ldr	r1, [pc, #68]	; (800600c <UARTEx_SetNbDataToProcess+0x94>)
 8005fc8:	5c8a      	ldrb	r2, [r1, r2]
 8005fca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fce:	7b3a      	ldrb	r2, [r7, #12]
 8005fd0:	490f      	ldr	r1, [pc, #60]	; (8006010 <UARTEx_SetNbDataToProcess+0x98>)
 8005fd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	7b7a      	ldrb	r2, [r7, #13]
 8005fe4:	4909      	ldr	r1, [pc, #36]	; (800600c <UARTEx_SetNbDataToProcess+0x94>)
 8005fe6:	5c8a      	ldrb	r2, [r1, r2]
 8005fe8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fec:	7b7a      	ldrb	r2, [r7, #13]
 8005fee:	4908      	ldr	r1, [pc, #32]	; (8006010 <UARTEx_SetNbDataToProcess+0x98>)
 8005ff0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ff2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	080064d8 	.word	0x080064d8
 8006010:	080064e0 	.word	0x080064e0

08006014 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006014:	b480      	push	{r7}
 8006016:	b08b      	sub	sp, #44	; 0x2c
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	fa93 f3a3 	rbit	r3, r3
 800602e:	613b      	str	r3, [r7, #16]
  return result;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d101      	bne.n	800603e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800603a:	2320      	movs	r3, #32
 800603c:	e003      	b.n	8006046 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	fab3 f383 	clz	r3, r3
 8006044:	b2db      	uxtb	r3, r3
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	2103      	movs	r1, #3
 800604a:	fa01 f303 	lsl.w	r3, r1, r3
 800604e:	43db      	mvns	r3, r3
 8006050:	401a      	ands	r2, r3
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	fa93 f3a3 	rbit	r3, r3
 800605c:	61fb      	str	r3, [r7, #28]
  return result;
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8006068:	2320      	movs	r3, #32
 800606a:	e003      	b.n	8006074 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	fab3 f383 	clz	r3, r3
 8006072:	b2db      	uxtb	r3, r3
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	6879      	ldr	r1, [r7, #4]
 8006078:	fa01 f303 	lsl.w	r3, r1, r3
 800607c:	431a      	orrs	r2, r3
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	601a      	str	r2, [r3, #0]
}
 8006082:	bf00      	nop
 8006084:	372c      	adds	r7, #44	; 0x2c
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800608e:	b480      	push	{r7}
 8006090:	b085      	sub	sp, #20
 8006092:	af00      	add	r7, sp, #0
 8006094:	60f8      	str	r0, [r7, #12]
 8006096:	60b9      	str	r1, [r7, #8]
 8006098:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	43db      	mvns	r3, r3
 80060a2:	401a      	ands	r2, r3
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	431a      	orrs	r2, r3
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	605a      	str	r2, [r3, #4]
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80060be:	b480      	push	{r7}
 80060c0:	b08b      	sub	sp, #44	; 0x2c
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	fa93 f3a3 	rbit	r3, r3
 80060d8:	613b      	str	r3, [r7, #16]
  return result;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80060e4:	2320      	movs	r3, #32
 80060e6:	e003      	b.n	80060f0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	fab3 f383 	clz	r3, r3
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	005b      	lsls	r3, r3, #1
 80060f2:	2103      	movs	r1, #3
 80060f4:	fa01 f303 	lsl.w	r3, r1, r3
 80060f8:	43db      	mvns	r3, r3
 80060fa:	401a      	ands	r2, r3
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	fa93 f3a3 	rbit	r3, r3
 8006106:	61fb      	str	r3, [r7, #28]
  return result;
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8006112:	2320      	movs	r3, #32
 8006114:	e003      	b.n	800611e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	fab3 f383 	clz	r3, r3
 800611c:	b2db      	uxtb	r3, r3
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	fa01 f303 	lsl.w	r3, r1, r3
 8006126:	431a      	orrs	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800612c:	bf00      	nop
 800612e:	372c      	adds	r7, #44	; 0x2c
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8006138:	b480      	push	{r7}
 800613a:	b08b      	sub	sp, #44	; 0x2c
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	fa93 f3a3 	rbit	r3, r3
 8006152:	613b      	str	r3, [r7, #16]
  return result;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006158:	69bb      	ldr	r3, [r7, #24]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800615e:	2320      	movs	r3, #32
 8006160:	e003      	b.n	800616a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	fab3 f383 	clz	r3, r3
 8006168:	b2db      	uxtb	r3, r3
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	2103      	movs	r1, #3
 800616e:	fa01 f303 	lsl.w	r3, r1, r3
 8006172:	43db      	mvns	r3, r3
 8006174:	401a      	ands	r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	fa93 f3a3 	rbit	r3, r3
 8006180:	61fb      	str	r3, [r7, #28]
  return result;
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800618c:	2320      	movs	r3, #32
 800618e:	e003      	b.n	8006198 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	fab3 f383 	clz	r3, r3
 8006196:	b2db      	uxtb	r3, r3
 8006198:	005b      	lsls	r3, r3, #1
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	fa01 f303 	lsl.w	r3, r1, r3
 80061a0:	431a      	orrs	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	60da      	str	r2, [r3, #12]
}
 80061a6:	bf00      	nop
 80061a8:	372c      	adds	r7, #44	; 0x2c
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b08b      	sub	sp, #44	; 0x2c
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	60f8      	str	r0, [r7, #12]
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a1a      	ldr	r2, [r3, #32]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	fa93 f3a3 	rbit	r3, r3
 80061cc:	613b      	str	r3, [r7, #16]
  return result;
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80061d8:	2320      	movs	r3, #32
 80061da:	e003      	b.n	80061e4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	fab3 f383 	clz	r3, r3
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	210f      	movs	r1, #15
 80061e8:	fa01 f303 	lsl.w	r3, r1, r3
 80061ec:	43db      	mvns	r3, r3
 80061ee:	401a      	ands	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	fa93 f3a3 	rbit	r3, r3
 80061fa:	61fb      	str	r3, [r7, #28]
  return result;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	2b00      	cmp	r3, #0
 8006204:	d101      	bne.n	800620a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8006206:	2320      	movs	r3, #32
 8006208:	e003      	b.n	8006212 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	fab3 f383 	clz	r3, r3
 8006210:	b2db      	uxtb	r3, r3
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	fa01 f303 	lsl.w	r3, r1, r3
 800621a:	431a      	orrs	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006220:	bf00      	nop
 8006222:	372c      	adds	r7, #44	; 0x2c
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800622c:	b480      	push	{r7}
 800622e:	b08b      	sub	sp, #44	; 0x2c
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	0a1b      	lsrs	r3, r3, #8
 8006240:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	fa93 f3a3 	rbit	r3, r3
 8006248:	613b      	str	r3, [r7, #16]
  return result;
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8006254:	2320      	movs	r3, #32
 8006256:	e003      	b.n	8006260 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	fab3 f383 	clz	r3, r3
 800625e:	b2db      	uxtb	r3, r3
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	210f      	movs	r1, #15
 8006264:	fa01 f303 	lsl.w	r3, r1, r3
 8006268:	43db      	mvns	r3, r3
 800626a:	401a      	ands	r2, r3
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	0a1b      	lsrs	r3, r3, #8
 8006270:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	fa93 f3a3 	rbit	r3, r3
 8006278:	61fb      	str	r3, [r7, #28]
  return result;
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800627e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8006284:	2320      	movs	r3, #32
 8006286:	e003      	b.n	8006290 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	fab3 f383 	clz	r3, r3
 800628e:	b2db      	uxtb	r3, r3
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	fa01 f303 	lsl.w	r3, r1, r3
 8006298:	431a      	orrs	r2, r3
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800629e:	bf00      	nop
 80062a0:	372c      	adds	r7, #44	; 0x2c
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b088      	sub	sp, #32
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	fa93 f3a3 	rbit	r3, r3
 80062c0:	60fb      	str	r3, [r7, #12]
  return result;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d101      	bne.n	80062d0 <LL_GPIO_Init+0x26>
    return 32U;
 80062cc:	2320      	movs	r3, #32
 80062ce:	e003      	b.n	80062d8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	fab3 f383 	clz	r3, r3
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80062da:	e047      	b.n	800636c <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	2101      	movs	r1, #1
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	fa01 f303 	lsl.w	r3, r1, r3
 80062e8:	4013      	ands	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d039      	beq.n	8006366 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d003      	beq.n	8006302 <LL_GPIO_Init+0x58>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d10d      	bne.n	800631e <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	461a      	mov	r2, r3
 8006308:	69b9      	ldr	r1, [r7, #24]
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7ff fed7 	bl	80060be <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	461a      	mov	r2, r3
 8006316:	69b9      	ldr	r1, [r7, #24]
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f7ff feb8 	bl	800608e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	461a      	mov	r2, r3
 8006324:	69b9      	ldr	r1, [r7, #24]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7ff ff06 	bl	8006138 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2b02      	cmp	r3, #2
 8006332:	d111      	bne.n	8006358 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	2bff      	cmp	r3, #255	; 0xff
 8006338:	d807      	bhi.n	800634a <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	695b      	ldr	r3, [r3, #20]
 800633e:	461a      	mov	r2, r3
 8006340:	69b9      	ldr	r1, [r7, #24]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7ff ff35 	bl	80061b2 <LL_GPIO_SetAFPin_0_7>
 8006348:	e006      	b.n	8006358 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	461a      	mov	r2, r3
 8006350:	69b9      	ldr	r1, [r7, #24]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7ff ff6a 	bl	800622c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	461a      	mov	r2, r3
 800635e:	69b9      	ldr	r1, [r7, #24]
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	f7ff fe57 	bl	8006014 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	3301      	adds	r3, #1
 800636a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	fa22 f303 	lsr.w	r3, r2, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1b0      	bne.n	80062dc <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3720      	adds	r7, #32
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800638c:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8006390:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	b29b      	uxth	r3, r3
 800639e:	43db      	mvns	r3, r3
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	4013      	ands	r3, r2
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80063ac:	2300      	movs	r3, #0
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	3714      	adds	r7, #20
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b085      	sub	sp, #20
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
 80063c2:	1d3b      	adds	r3, r7, #4
 80063c4:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <memset>:
 80063f6:	4402      	add	r2, r0
 80063f8:	4603      	mov	r3, r0
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d100      	bne.n	8006400 <memset+0xa>
 80063fe:	4770      	bx	lr
 8006400:	f803 1b01 	strb.w	r1, [r3], #1
 8006404:	e7f9      	b.n	80063fa <memset+0x4>
	...

08006408 <__libc_init_array>:
 8006408:	b570      	push	{r4, r5, r6, lr}
 800640a:	4d0d      	ldr	r5, [pc, #52]	; (8006440 <__libc_init_array+0x38>)
 800640c:	2600      	movs	r6, #0
 800640e:	4c0d      	ldr	r4, [pc, #52]	; (8006444 <__libc_init_array+0x3c>)
 8006410:	1b64      	subs	r4, r4, r5
 8006412:	10a4      	asrs	r4, r4, #2
 8006414:	42a6      	cmp	r6, r4
 8006416:	d109      	bne.n	800642c <__libc_init_array+0x24>
 8006418:	4d0b      	ldr	r5, [pc, #44]	; (8006448 <__libc_init_array+0x40>)
 800641a:	2600      	movs	r6, #0
 800641c:	4c0b      	ldr	r4, [pc, #44]	; (800644c <__libc_init_array+0x44>)
 800641e:	f000 f817 	bl	8006450 <_init>
 8006422:	1b64      	subs	r4, r4, r5
 8006424:	10a4      	asrs	r4, r4, #2
 8006426:	42a6      	cmp	r6, r4
 8006428:	d105      	bne.n	8006436 <__libc_init_array+0x2e>
 800642a:	bd70      	pop	{r4, r5, r6, pc}
 800642c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006430:	3601      	adds	r6, #1
 8006432:	4798      	blx	r3
 8006434:	e7ee      	b.n	8006414 <__libc_init_array+0xc>
 8006436:	f855 3b04 	ldr.w	r3, [r5], #4
 800643a:	3601      	adds	r6, #1
 800643c:	4798      	blx	r3
 800643e:	e7f2      	b.n	8006426 <__libc_init_array+0x1e>
 8006440:	080064f0 	.word	0x080064f0
 8006444:	080064f0 	.word	0x080064f0
 8006448:	080064f0 	.word	0x080064f0
 800644c:	080064f4 	.word	0x080064f4

08006450 <_init>:
 8006450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006452:	bf00      	nop
 8006454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006456:	bc08      	pop	{r3}
 8006458:	469e      	mov	lr, r3
 800645a:	4770      	bx	lr

0800645c <_fini>:
 800645c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645e:	bf00      	nop
 8006460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006462:	bc08      	pop	{r3}
 8006464:	469e      	mov	lr, r3
 8006466:	4770      	bx	lr
